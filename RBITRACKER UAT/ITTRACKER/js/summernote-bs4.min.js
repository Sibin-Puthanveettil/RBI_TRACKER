/*! Summernote v0.8.11 | (c) 2013- Alan Hong and other contributors | MIT license */

!function (a, b) {
    "object" == typeof exports && "undefined" != typeof module ? b(require("jquery")) : "function" == typeof define && define.amd ? define(["jquery"], b) : b(a.jQuery);
}(this, function (a) {
    "use strict";
    a = a && a.hasOwnProperty("default") ? a.default : a;
    var b = function () {
        function b(a, b, c, d) {
            this.markup = a, this.children = b, this.options = c, this.callback = d;
        }
        return b.prototype.render = function (b) {
            var c = a(this.markup);
            if (this.options && this.options.contents && c.html(this.options.contents), this.options && this.options.className && c.addClass(this.options.className),
                this.options && this.options.data && a.each(this.options.data, function (a, b) {
                    c.attr("data-" + a, b);
                }), this.options && this.options.click && c.on("click", this.options.click), this.children) {
                var d = c.find(".note-children-container");
                this.children.forEach(function (a) {
                    a.render(d.length ? d : c);
                });
            }
            return this.callback && this.callback(c, this.options), this.options && this.options.callback && this.options.callback(c),
                b && b.append(c), c;
        }, b;
    }(), c = function (c, d) {
        return function () {
            var e = "object" == typeof arguments[1] ? arguments[1] : arguments[0], f = a.isArray(arguments[0]) ? arguments[0] : [];
            return e && e.children && (f = e.children), new b(c, f, e, d);
        };
    }, d = c('<div class="note-editor note-frame card"/>'), e = c('<div class="note-toolbar card-header" role="toolbar"></div>'), f = c('<div class="note-editing-area"/>'), g = c('<textarea class="note-codable" role="textbox" aria-multiline="true"/>'), h = c('<div class="note-editable card-block" contentEditable="true" role="textbox" aria-multiline="true"/>'), i = c(['<output class="note-status-output" aria-live="polite"/>', '<div class="note-statusbar" role="status">', '  <output class="note-status-output" aria-live="polite"></output>', '  <div class="note-resizebar" role="seperator" aria-orientation="horizontal" aria-label="Resize">', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', "  </div>", "</div>"].join("")), j = c('<div class="note-editor"/>'), k = c(['<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>', '<output class="note-status-output" aria-live="polite"/>'].join("")), l = c('<div class="note-btn-group btn-group">'), m = c('<div class="dropdown-menu" role="list">', function (b, c) {
        var d = a.isArray(c.items) ? c.items.map(function (a) {
            var b = "string" == typeof a ? a : a.value || "", d = c.template ? c.template(a) : a, e = "object" == typeof a ? a.option : void 0;
            return '<a class="dropdown-item" href="#" ' + ('data-value="' + b + '"' + (void 0 !== e ? ' data-option="' + e + '"' : "")) + ' role="listitem" aria-label="' + a + '">' + d + "</a>";
        }).join("") : c.items;
        b.html(d).attr({
            "aria-label": c.title
        });
    }), n = c('<div class="dropdown-menu note-check" role="list">', function (b, c) {
        var d = a.isArray(c.items) ? c.items.map(function (a) {
            var b = "string" == typeof a ? a : a.value || "", d = c.template ? c.template(a) : a;
            return '<a class="dropdown-item" href="#" data-value="' + b + '" role="listitem" aria-label="' + a + '">' + s(c.checkClassName) + " " + d + "</a>";
        }).join("") : c.items;
        b.html(d).attr({
            "aria-label": c.title
        });
    }), o = c('<div class="note-color-palette"/>', function (a, b) {
        for (var c = [], d = 0, e = b.colors.length; d < e; d++) {
            for (var f = b.eventName, g = b.colors[d], h = b.colorsName[d], i = [], j = 0, k = g.length; j < k; j++) {
                var l = g[j], m = h[j];
                i.push(['<button type="button" class="note-color-btn"', 'style="background-color:', l, '" ', 'data-event="', f, '" ', 'data-value="', l, '" ', 'title="', m, '" ', 'aria-label="', m, '" ', 'data-toggle="button" tabindex="-1"></button>'].join(""));
            }
            c.push('<div class="note-color-row">' + i.join("") + "</div>");
        }
        a.html(c.join("")), b.tooltip && a.find(".note-color-btn").tooltip({
            container: b.container,
            trigger: "hover",
            placement: "bottom"
        });
    }), p = c('<div class="modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function (a, b) {
        b.fade && a.addClass("fade"), a.attr({
            "aria-label": b.title
        }), a.html(['<div class="modal-dialog">', '  <div class="modal-content">', b.title ? '    <div class="modal-header">      <h4 class="modal-title">' + b.title + '</h4>      <button type="button" class="close" data-dismiss="modal" aria-label="Close" aria-hidden="true">&times;</button>    </div>' : "", '    <div class="modal-body">' + b.body + "</div>", b.footer ? '    <div class="modal-footer">' + b.footer + "</div>" : "", "  </div>", "</div>"].join(""));
    }), q = c(['<div class="note-popover popover in">', '  <div class="arrow"/>', '  <div class="popover-content note-children-container"/>', "</div>"].join(""), function (a, b) {
        var c = void 0 !== b.direction ? b.direction : "bottom";
        a.addClass(c), b.hideArrow && a.find(".arrow").hide();
    }), r = c('<div class="form-check"></div>', function (a, b) {
        a.html(['<label class="form-check-label"' + (b.id ? ' for="' + b.id + '"' : "") + ">", ' <input role="checkbox" type="checkbox" class="form-check-input"' + (b.id ? ' id="' + b.id + '"' : ""), b.checked ? " checked" : "", ' aria-label="' + (b.text ? b.text : "") + '"', ' aria-checked="' + (b.checked ? "true" : "false") + '"/>', " " + (b.text ? b.text : "") + "</label>"].join(""));
    }), s = function (a, b) {
        return "<" + (b = b || "i") + ' class="' + a + '"/>';
    }, t = {
        editor: d,
        toolbar: e,
        editingArea: f,
        codable: g,
        editable: h,
        statusbar: i,
        airEditor: j,
        airEditable: k,
        buttonGroup: l,
        dropdown: m,
        dropdownButtonContents: function (a) {
            return a;
        },
        dropdownCheck: n,
        palette: o,
        dialog: p,
        popover: q,
        icon: s,
        checkbox: r,
        options: {},
        button: function (a, b) {
            return c('<button type="button" class="note-btn btn btn-light btn-sm" role="button" tabindex="-1">', function (a, b) {
                b && b.tooltip && a.attr({
                    title: b.tooltip,
                    "aria-label": b.tooltip
                }).tooltip({
                    container: void 0 !== b.container ? b.container : "body",
                    trigger: "hover",
                    placement: "bottom"
                });
            })(a, b);
        },
        toggleBtn: function (a, b) {
            a.toggleClass("disabled", !b), a.attr("disabled", !b);
        },
        toggleBtnActive: function (a, b) {
            a.toggleClass("active", b);
        },
        onDialogShown: function (a, b) {
            a.one("shown.bs.modal", b);
        },
        onDialogHidden: function (a, b) {
            a.one("hidden.bs.modal", b);
        },
        showDialog: function (a) {
            a.modal("show");
        },
        hideDialog: function (a) {
            a.modal("hide");
        },
        createLayout: function (a, b) {
            var c = (b.airMode ? t.airEditor([t.editingArea([t.airEditable()])]) : t.editor([t.toolbar(), t.editingArea([t.codable(), t.editable()]), t.statusbar()])).render();
            return c.insertAfter(a), {
                note: a,
                editor: c,
                toolbar: c.find(".note-toolbar"),
                editingArea: c.find(".note-editing-area"),
                editable: c.find(".note-editable"),
                codable: c.find(".note-codable"),
                statusbar: c.find(".note-statusbar")
            };
        },
        removeLayout: function (a, b) {
            a.html(b.editable.html()), b.editor.remove(), a.show();
        }
    };
    var u = 0;
    var v = {
        eq: function (a) {
            return function (b) {
                return a === b;
            };
        },
        eq2: function (a, b) {
            return a === b;
        },
        peq2: function (a) {
            return function (b, c) {
                return b[a] === c[a];
            };
        },
        ok: function () {
            return !0;
        },
        fail: function () {
            return !1;
        },
        self: function (a) {
            return a;
        },
        not: function (a) {
            return function () {
                return !a.apply(a, arguments);
            };
        },
        and: function (a, b) {
            return function (c) {
                return a(c) && b(c);
            };
        },
        invoke: function (a, b) {
            return function () {
                return a[b].apply(a, arguments);
            };
        },
        uniqueId: function (a) {
            var b = ++u + "";
            return a ? a + b : b;
        },
        rect2bnd: function (a) {
            var b = $(document);
            return {
                top: a.top + b.scrollTop(),
                left: a.left + b.scrollLeft(),
                width: a.right - a.left,
                height: a.bottom - a.top
            };
        },
        invertObject: function (a) {
            var b = {};
            for (var c in a) a.hasOwnProperty(c) && (b[a[c]] = c);
            return b;
        },
        namespaceToCamel: function (a, b) {
            return (b = b || "") + a.split(".").map(function (a) {
                return a.substring(0, 1).toUpperCase() + a.substring(1);
            }).join("");
        },
        debounce: function (a, b, c) {
            var d;
            return function () {
                var e = this, f = arguments, g = c && !d;
                clearTimeout(d), d = setTimeout(function () {
                    d = null, c || a.apply(e, f);
                }, b), g && a.apply(e, f);
            };
        }
    };
    function w(a) {
        return a[0];
    }
    function x(a) {
        return a[a.length - 1];
    }
    function y(a) {
        return a.slice(1);
    }
    function z(b, c) {
        return a.inArray(c, b);
    }
    function A(a, b) {
        return -1 !== z(a, b);
    }
    var B = {
        head: w,
        last: x,
        initial: function (a) {
            return a.slice(0, a.length - 1);
        },
        tail: y,
        prev: function (a, b) {
            var c = z(a, b);
            return -1 === c ? null : a[c - 1];
        },
        next: function (a, b) {
            var c = z(a, b);
            return -1 === c ? null : a[c + 1];
        },
        find: function (a, b) {
            for (var c = 0, d = a.length; c < d; c++) {
                var e = a[c];
                if (b(e)) return e;
            }
        },
        contains: A,
        all: function (a, b) {
            for (var c = 0, d = a.length; c < d; c++) if (!b(a[c])) return !1;
            return !0;
        },
        sum: function (a, b) {
            return b = b || v.self, a.reduce(function (a, c) {
                return a + b(c);
            }, 0);
        },
        from: function (a) {
            for (var b = [], c = a.length, d = -1; ++d < c;) b[d] = a[d];
            return b;
        },
        isEmpty: function (a) {
            return !a || !a.length;
        },
        clusterBy: function (a, b) {
            return a.length ? y(a).reduce(function (a, c) {
                var d = x(a);
                return b(x(d), c) ? d[d.length] = c : a[a.length] = [c], a;
            }, [[w(a)]]) : [];
        },
        compact: function (a) {
            for (var b = [], c = 0, d = a.length; c < d; c++) a[c] && b.push(a[c]);
            return b;
        },
        unique: function (a) {
            for (var b = [], c = 0, d = a.length; c < d; c++) A(b, a[c]) || b.push(a[c]);
            return b;
        }
    }, C = "function" == typeof define && define.amd;
    var D, E = navigator.userAgent, F = /MSIE|Trident/i.test(E);
    if (F) {
        var G = /MSIE (\d+[.]\d+)/.exec(E);
        G && (D = parseFloat(G[1])), (G = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(E)) && (D = parseFloat(G[1]));
    }
    var H = /Edge\/\d+/.test(E), I = !!window.CodeMirror;
    if (!I && C) if ("function" == typeof __webpack_require__) try {
        require.resolve("codemirror"), I = !0;
    } catch (d) { } else if ("undefined" != typeof require) if (void 0 !== require.resolve) try {
        require.resolve("codemirror"), I = !0;
    } catch (d) { } else void 0 !== require.specified && (I = require.specified("codemirror"));
    var J = "ontouchstart" in window || 0 < navigator.MaxTouchPoints || 0 < navigator.msMaxTouchPoints, K = F || H ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted" : "input", L = {
        isMac: -1 < navigator.appVersion.indexOf("Mac"),
        isMSIE: F,
        isEdge: H,
        isFF: !H && /firefox/i.test(E),
        isPhantom: /PhantomJS/i.test(E),
        isWebkit: !H && /webkit/i.test(E),
        isChrome: !H && /chrome/i.test(E),
        isSafari: !H && /safari/i.test(E),
        browserVersion: D,
        jqueryVersion: parseFloat(a.fn.jquery),
        isSupportAmd: C,
        isSupportTouch: J,
        hasCodeMirror: I,
        isFontInstalled: function (b) {
            var c = "Comic Sans MS" === b ? "Courier New" : "Comic Sans MS", d = a("<div>").css({
                position: "absolute",
                left: "-9999px",
                top: "-9999px",
                fontSize: "200px"
            }).text("mmmmmmmmmwwwwwww").appendTo(document.body), e = d.css("fontFamily", c).width(), f = d.css("fontFamily", b + "," + c).width();
            return d.remove(), e !== f;
        },
        isW3CRangeSupport: !!document.createRange,
        inputEventName: K
    }, M = String.fromCharCode(160);
    function N(b) {
        return b && a(b).hasClass("note-editable");
    }
    function O(a) {
        return a = a.toUpperCase(), function (b) {
            return b && b.nodeName.toUpperCase() === a;
        };
    }
    function P(a) {
        return a && 3 === a.nodeType;
    }
    function Q(a) {
        return a && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^VIDEO|^EMBED/.test(a.nodeName.toUpperCase());
    }
    function R(a) {
        return !N(a) && a && /^DIV|^P|^LI|^H[1-7]/.test(a.nodeName.toUpperCase());
    }
    var S = O("PRE"), T = O("LI");
    var U = O("TABLE"), V = O("DATA");
    function W(a) {
        return !(ab(a) || X(a) || Y(a) || R(a) || U(a) || _(a) || V(a));
    }
    function X(a) {
        return a && /^UL|^OL/.test(a.nodeName.toUpperCase());
    }
    var Y = O("HR");
    function Z(a) {
        return a && /^TD|^TH/.test(a.nodeName.toUpperCase());
    }
    var _ = O("BLOCKQUOTE");
    function ab(a) {
        return Z(a) || _(a) || N(a);
    }
    var bb = O("A");
    var cb = O("BODY");
    var db = L.isMSIE && L.browserVersion < 11 ? "&nbsp;" : "<br>";
    function eb(a) {
        return P(a) ? a.nodeValue.length : a ? a.childNodes.length : 0;
    }
    function fb(a) {
        var b = eb(a);
        return 0 === b || !P(a) && 1 === b && a.innerHTML === db || !(!B.all(a.childNodes, P) || "" !== a.innerHTML);
    }
    function gb(a) {
        Q(a) || eb(a) || (a.innerHTML = db);
    }
    function hb(a, b) {
        for (; a;) {
            if (b(a)) return a;
            if (N(a)) break;
            a = a.parentNode;
        }
        return null;
    }
    function ib(a, b) {
        b = b || v.fail;
        var c = [];
        return hb(a, function (a) {
            return N(a) || c.push(a), b(a);
        }), c;
    }
    function jb(a, b) {
        b = b || v.fail;
        for (var c = []; a && !b(a);) c.push(a), a = a.nextSibling;
        return c;
    }
    function kb(a, b) {
        var c = b.nextSibling, d = b.parentNode;
        return c ? d.insertBefore(a, c) : d.appendChild(a), a;
    }
    function lb(b, c) {
        return a.each(c, function (a, c) {
            b.appendChild(c);
        }), b;
    }
    function mb(a) {
        return 0 === a.offset;
    }
    function nb(a) {
        return a.offset === eb(a.node);
    }
    function ob(a) {
        return mb(a) || nb(a);
    }
    function pb(a, b) {
        for (; a && a !== b;) {
            if (0 !== rb(a)) return !1;
            a = a.parentNode;
        }
        return !0;
    }
    function qb(a, b) {
        if (!b) return !1;
        for (; a && a !== b;) {
            if (rb(a) !== eb(a.parentNode) - 1) return !1;
            a = a.parentNode;
        }
        return !0;
    }
    function rb(a) {
        for (var b = 0; a = a.previousSibling;) b += 1;
        return b;
    }
    function sb(a) {
        return !!(a && a.childNodes && a.childNodes.length);
    }
    function tb(a, b) {
        var c, d;
        if (0 === a.offset) {
            if (N(a.node)) return null;
            c = a.node.parentNode, d = rb(a.node);
        } else d = sb(a.node) ? eb(c = a.node.childNodes[a.offset - 1]) : (c = a.node, b ? 0 : a.offset - 1);
        return {
            node: c,
            offset: d
        };
    }
    function ub(a, b) {
        var c, d;
        if (eb(a.node) === a.offset) {
            if (N(a.node)) return null;
            c = a.node.parentNode, d = rb(a.node) + 1;
        } else d = sb(a.node) ? (c = a.node.childNodes[a.offset], 0) : (c = a.node, b ? eb(a.node) : a.offset + 1);
        return {
            node: c,
            offset: d
        };
    }
    function vb(a, b) {
        return a.node === b.node && a.offset === b.offset;
    }
    function wb(a, b) {
        var c = b && b.isSkipPaddingBlankHTML, d = b && b.isNotSplitEdgePoint, e = b && b.isDiscardEmptySplits;
        if (e && (c = !0), ob(a) && (P(a.node) || d)) {
            if (mb(a)) return a.node;
            if (nb(a)) return a.node.nextSibling;
        }
        if (P(a.node)) return a.node.splitText(a.offset);
        var f = a.node.childNodes[a.offset], g = kb(a.node.cloneNode(!1), a.node);
        return lb(g, jb(f)), c || (gb(a.node), gb(g)), e && (fb(a.node) && zb(a.node), fb(g)) ? (zb(g),
            a.node.nextSibling) : g;
    }
    function xb(a, b, c) {
        var d = ib(b.node, v.eq(a));
        return d.length ? 1 === d.length ? wb(b, c) : d.reduce(function (a, d) {
            return a === b.node && (a = wb(b, c)), wb({
                node: d,
                offset: a ? rb(a) : eb(d)
            }, c);
        }) : null;
    }
    function yb(a) {
        return document.createElement(a);
    }
    function zb(a, b) {
        if (a && a.parentNode) {
            if (a.removeNode) return a.removeNode(b);
            var c = a.parentNode;
            if (!b) {
                for (var d = [], e = 0, f = a.childNodes.length; e < f; e++) d.push(a.childNodes[e]);
                for (e = 0, f = d.length; e < f; e++) c.insertBefore(d[e], a);
            }
            c.removeChild(a);
        }
    }
    var Ab = O("TEXTAREA");
    function Bb(a, b) {
        var c = Ab(a[0]) ? a.val() : a.html();
        return b ? c.replace(/[\n\r]/g, "") : c;
    }
    var Cb = {
        NBSP_CHAR: M,
        ZERO_WIDTH_NBSP_CHAR: "﻿",
        blank: db,
        emptyPara: "<p>" + db + "</p>",
        makePredByNodeName: O,
        isEditable: N,
        isControlSizing: function (b) {
            return b && a(b).hasClass("note-control-sizing");
        },
        isText: P,
        isElement: function (a) {
            return a && 1 === a.nodeType;
        },
        isVoid: Q,
        isPara: R,
        isPurePara: function (a) {
            return R(a) && !T(a);
        },
        isHeading: function (a) {
            return a && /^H[1-7]/.test(a.nodeName.toUpperCase());
        },
        isInline: W,
        isBlock: v.not(W),
        isBodyInline: function (a) {
            return W(a) && !hb(a, R);
        },
        isBody: cb,
        isParaInline: function (a) {
            return W(a) && !!hb(a, R);
        },
        isPre: S,
        isList: X,
        isTable: U,
        isData: V,
        isCell: Z,
        isBlockquote: _,
        isBodyContainer: ab,
        isAnchor: bb,
        isDiv: O("DIV"),
        isLi: T,
        isBR: O("BR"),
        isSpan: O("SPAN"),
        isB: O("B"),
        isU: O("U"),
        isS: O("S"),
        isI: O("I"),
        isImg: O("IMG"),
        isTextarea: Ab,
        isEmpty: fb,
        isEmptyAnchor: v.and(bb, fb),
        isClosestSibling: function (a, b) {
            return a.nextSibling === b || a.previousSibling === b;
        },
        withClosestSiblings: function (a, b) {
            b = b || v.ok;
            var c = [];
            return a.previousSibling && b(a.previousSibling) && c.push(a.previousSibling), c.push(a),
                a.nextSibling && b(a.nextSibling) && c.push(a.nextSibling), c;
        },
        nodeLength: eb,
        isLeftEdgePoint: mb,
        isRightEdgePoint: nb,
        isEdgePoint: ob,
        isLeftEdgeOf: pb,
        isRightEdgeOf: qb,
        isLeftEdgePointOf: function (a, b) {
            return mb(a) && pb(a.node, b);
        },
        isRightEdgePointOf: function (a, b) {
            return nb(a) && qb(a.node, b);
        },
        prevPoint: tb,
        nextPoint: ub,
        isSamePoint: vb,
        isVisiblePoint: function (a) {
            if (P(a.node) || !sb(a.node) || fb(a.node)) return !0;
            var b = a.node.childNodes[a.offset - 1], c = a.node.childNodes[a.offset];
            return !(b && !Q(b) || c && !Q(c));
        },
        prevPointUntil: function (a, b) {
            for (; a;) {
                if (b(a)) return a;
                a = tb(a);
            }
            return null;
        },
        nextPointUntil: function (a, b) {
            for (; a;) {
                if (b(a)) return a;
                a = ub(a);
            }
            return null;
        },
        isCharPoint: function (a) {
            if (!P(a.node)) return !1;
            var b = a.node.nodeValue.charAt(a.offset - 1);
            return b && " " !== b && b !== M;
        },
        walkPoint: function (a, b, c, d) {
            for (var e = a; e && (c(e), !vb(e, b));) e = ub(e, d && a.node !== e.node && b.node !== e.node);
        },
        ancestor: hb,
        singleChildAncestor: function (a, b) {
            for (a = a.parentNode; a && 1 === eb(a);) {
                if (b(a)) return a;
                if (N(a)) break;
                a = a.parentNode;
            }
            return null;
        },
        listAncestor: ib,
        lastAncestor: function (a, b) {
            var c = ib(a);
            return B.last(c.filter(b));
        },
        listNext: jb,
        listPrev: function (a, b) {
            b = b || v.fail;
            for (var c = []; a && !b(a);) c.push(a), a = a.previousSibling;
            return c;
        },
        listDescendant: function (a, b) {
            var c = [];
            return b = b || v.ok, function d(e) {
                a !== e && b(e) && c.push(e);
                for (var f = 0, g = e.childNodes.length; f < g; f++) d(e.childNodes[f]);
            }(a), c;
        },
        commonAncestor: function (b, c) {
            for (var d = ib(b), e = c; e; e = e.parentNode) if (-1 < a.inArray(e, d)) return e;
            return null;
        },
        wrap: function (b, c) {
            var d = b.parentNode, e = a("<" + c + ">")[0];
            return d.insertBefore(e, b), e.appendChild(b), e;
        },
        insertAfter: kb,
        appendChildNodes: lb,
        position: rb,
        hasChildren: sb,
        makeOffsetPath: function (a, b) {
            return ib(b, v.eq(a)).map(rb).reverse();
        },
        fromOffsetPath: function (a, b) {
            for (var c = a, d = 0, e = b.length; d < e; d++) c = c.childNodes.length <= b[d] ? c.childNodes[c.childNodes.length - 1] : c.childNodes[b[d]];
            return c;
        },
        splitTree: xb,
        splitPoint: function (a, b) {
            var c, d, e = b ? R : ab, f = ib(a.node, e), g = B.last(f) || a.node;
            d = e(g) ? (c = f[f.length - 2], g) : (c = g).parentNode;
            var h = c && xb(c, a, {
                isSkipPaddingBlankHTML: b,
                isNotSplitEdgePoint: b
            });
            return h || d !== a.node || (h = a.node.childNodes[a.offset]), {
                rightNode: h,
                container: d
            };
        },
        create: yb,
        createText: function (a) {
            return document.createTextNode(a);
        },
        remove: zb,
        removeWhile: function (a, b) {
            for (; a && !N(a) && b(a);) {
                var c = a.parentNode;
                zb(a), a = c;
            }
        },
        replace: function (a, b) {
            if (a.nodeName.toUpperCase() === b.toUpperCase()) return a;
            var c = yb(b);
            return a.style.cssText && (c.style.cssText = a.style.cssText), lb(c, B.from(a.childNodes)),
                kb(c, a), zb(a), c;
        },
        html: function (b, c) {
            var d = Bb(b);
            c && (d = d.replace(/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g, function (a, b, c) {
                c = c.toUpperCase();
                var d = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(c) && !!b, e = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(c);
                return a + (d || e ? "\n" : "");
            }), d = a.trim(d));
            return d;
        },
        value: Bb,
        posFromPlaceholder: function (b) {
            var c = a(b), d = c.offset(), e = c.outerHeight(!0);
            return {
                left: d.left,
                top: d.top + e
            };
        },
        attachEvents: function (a, b) {
            Object.keys(b).forEach(function (c) {
                a.on(c, b[c]);
            });
        },
        detachEvents: function (a, b) {
            Object.keys(b).forEach(function (c) {
                a.off(c, b[c]);
            });
        },
        isCustomStyleTag: function (a) {
            return a && !P(a) && B.contains(a.classList, "note-styletag");
        }
    };
    function Db(a, b) {
        var c, d, e = a.parentElement(), f = document.body.createTextRange(), g = B.from(e.childNodes);
        for (c = 0; c < g.length; c++) if (!Cb.isText(g[c])) {
            if (f.moveToElementText(g[c]), 0 <= f.compareEndPoints("StartToStart", a)) break;
            d = g[c];
        }
        if (0 !== c && Cb.isText(g[c - 1])) {
            var h = document.body.createTextRange(), i = null;
            h.moveToElementText(d || e), h.collapse(!d), i = d ? d.nextSibling : e.firstChild;
            var j = a.duplicate();
            j.setEndPoint("StartToStart", h);
            for (var k = j.text.replace(/[\r\n]/g, "").length; k > i.nodeValue.length && i.nextSibling;) k -= i.nodeValue.length,
                i = i.nextSibling;
            i.nodeValue;
            b && i.nextSibling && Cb.isText(i.nextSibling) && k === i.nodeValue.length && (k -= i.nodeValue.length,
                i = i.nextSibling), e = i, c = k;
        }
        return {
            cont: e,
            offset: c
        };
    }
    function Eb(a) {
        var b = function (a, c) {
            var d, e;
            if (Cb.isText(a)) {
                var f = Cb.listPrev(a, v.not(Cb.isText)), g = B.last(f).previousSibling;
                d = g || a.parentNode, c += B.sum(B.tail(f), Cb.nodeLength), e = !g;
            } else {
                if (d = a.childNodes[c] || a, Cb.isText(d)) return b(d, 0);
                c = 0, e = !1;
            }
            return {
                node: d,
                collapseToStart: e,
                offset: c
            };
        }, c = document.body.createTextRange(), d = b(a.node, a.offset);
        return c.moveToElementText(d.node), c.collapse(d.collapseToStart), c.moveStart("character", d.offset),
            c;
    }
    var Fb = function () {
        function b(a, b, c, d) {
            this.sc = a, this.so = b, this.ec = c, this.eo = d, this.isOnEditable = this.makeIsOn(Cb.isEditable),
                this.isOnList = this.makeIsOn(Cb.isList), this.isOnAnchor = this.makeIsOn(Cb.isAnchor),
                this.isOnCell = this.makeIsOn(Cb.isCell), this.isOnData = this.makeIsOn(Cb.isData);
        }
        return b.prototype.nativeRange = function () {
            if (L.isW3CRangeSupport) {
                var a = document.createRange();
                return a.setStart(this.sc, this.so), a.setEnd(this.ec, this.eo), a;
            }
            var b = Eb({
                node: this.sc,
                offset: this.so
            });
            return b.setEndPoint("EndToEnd", Eb({
                node: this.ec,
                offset: this.eo
            })), b;
        }, b.prototype.getPoints = function () {
            return {
                sc: this.sc,
                so: this.so,
                ec: this.ec,
                eo: this.eo
            };
        }, b.prototype.getStartPoint = function () {
            return {
                node: this.sc,
                offset: this.so
            };
        }, b.prototype.getEndPoint = function () {
            return {
                node: this.ec,
                offset: this.eo
            };
        }, b.prototype.select = function () {
            var a = this.nativeRange();
            if (L.isW3CRangeSupport) {
                var b = document.getSelection();
                0 < b.rangeCount && b.removeAllRanges(), b.addRange(a);
            } else a.select();
            return this;
        }, b.prototype.scrollIntoView = function (b) {
            var c = a(b).height();
            return b.scrollTop + c < this.sc.offsetTop && (b.scrollTop += Math.abs(b.scrollTop + c - this.sc.offsetTop)),
                this;
        }, b.prototype.normalize = function () {
            var a = function (a, b) {
                if (Cb.isVisiblePoint(a) && !Cb.isEdgePoint(a) || Cb.isVisiblePoint(a) && Cb.isRightEdgePoint(a) && !b || Cb.isVisiblePoint(a) && Cb.isLeftEdgePoint(a) && b || Cb.isVisiblePoint(a) && Cb.isBlock(a.node) && Cb.isEmpty(a.node)) return a;
                var c = Cb.ancestor(a.node, Cb.isBlock);
                if ((Cb.isLeftEdgePointOf(a, c) || Cb.isVoid(Cb.prevPoint(a).node)) && !b || (Cb.isRightEdgePointOf(a, c) || Cb.isVoid(Cb.nextPoint(a).node)) && b) {
                    if (Cb.isVisiblePoint(a)) return a;
                    b = !b;
                }
                return (b ? Cb.nextPointUntil(Cb.nextPoint(a), Cb.isVisiblePoint) : Cb.prevPointUntil(Cb.prevPoint(a), Cb.isVisiblePoint)) || a;
            }, c = a(this.getEndPoint(), !1), d = this.isCollapsed() ? c : a(this.getStartPoint(), !0);
            return new b(d.node, d.offset, c.node, c.offset);
        }, b.prototype.nodes = function (a, b) {
            a = a || v.ok;
            var c = b && b.includeAncestor, d = b && b.fullyContains, e = this.getStartPoint(), f = this.getEndPoint(), g = [], h = [];
            return Cb.walkPoint(e, f, function (b) {
                var e;
                Cb.isEditable(b.node) || (d ? (Cb.isLeftEdgePoint(b) && h.push(b.node), Cb.isRightEdgePoint(b) && B.contains(h, b.node) && (e = b.node)) : e = c ? Cb.ancestor(b.node, a) : b.node,
                    e && a(e) && g.push(e));
            }, !0), B.unique(g);
        }, b.prototype.commonAncestor = function () {
            return Cb.commonAncestor(this.sc, this.ec);
        }, b.prototype.expand = function (a) {
            var c = Cb.ancestor(this.sc, a), d = Cb.ancestor(this.ec, a);
            if (!c && !d) return new b(this.sc, this.so, this.ec, this.eo);
            var e = this.getPoints();
            return c && (e.sc = c, e.so = 0), d && (e.ec = d, e.eo = Cb.nodeLength(d)), new b(e.sc, e.so, e.ec, e.eo);
        }, b.prototype.collapse = function (a) {
            return a ? new b(this.sc, this.so, this.sc, this.so) : new b(this.ec, this.eo, this.ec, this.eo);
        }, b.prototype.splitText = function () {
            var a = this.sc === this.ec, c = this.getPoints();
            return Cb.isText(this.ec) && !Cb.isEdgePoint(this.getEndPoint()) && this.ec.splitText(this.eo),
                Cb.isText(this.sc) && !Cb.isEdgePoint(this.getStartPoint()) && (c.sc = this.sc.splitText(this.so),
                    c.so = 0, a && (c.ec = c.sc, c.eo = this.eo - this.so)), new b(c.sc, c.so, c.ec, c.eo);
        }, b.prototype.deleteContents = function () {
            if (this.isCollapsed()) return this;
            var c = this.splitText(), d = c.nodes(null, {
                fullyContains: !0
            }), e = Cb.prevPointUntil(c.getStartPoint(), function (a) {
                return !B.contains(d, a.node);
            }), f = [];
            return a.each(d, function (a, b) {
                var c = b.parentNode;
                e.node !== c && 1 === Cb.nodeLength(c) && f.push(c), Cb.remove(b, !1);
            }), a.each(f, function (a, b) {
                Cb.remove(b, !1);
            }), new b(e.node, e.offset, e.node, e.offset).normalize();
        }, b.prototype.makeIsOn = function (a) {
            return function () {
                var b = Cb.ancestor(this.sc, a);
                return !!b && b === Cb.ancestor(this.ec, a);
            };
        }, b.prototype.isLeftEdgeOf = function (a) {
            if (!Cb.isLeftEdgePoint(this.getStartPoint())) return !1;
            var b = Cb.ancestor(this.sc, a);
            return b && Cb.isLeftEdgeOf(this.sc, b);
        }, b.prototype.isCollapsed = function () {
            return this.sc === this.ec && this.so === this.eo;
        }, b.prototype.wrapBodyInlineWithPara = function () {
            if (Cb.isBodyContainer(this.sc) && Cb.isEmpty(this.sc)) return this.sc.innerHTML = Cb.emptyPara,
                new b(this.sc.firstChild, 0, this.sc.firstChild, 0);
            var a, c = this.normalize();
            if (Cb.isParaInline(this.sc) || Cb.isPara(this.sc)) return c;
            if (Cb.isInline(c.sc)) {
                var d = Cb.listAncestor(c.sc, v.not(Cb.isInline));
                a = B.last(d), Cb.isInline(a) || (a = d[d.length - 2] || c.sc.childNodes[c.so]);
            } else a = c.sc.childNodes[0 < c.so ? c.so - 1 : 0];
            var e = Cb.listPrev(a, Cb.isParaInline).reverse();
            if ((e = e.concat(Cb.listNext(a.nextSibling, Cb.isParaInline))).length) {
                var f = Cb.wrap(B.head(e), "p");
                Cb.appendChildNodes(f, B.tail(e));
            }
            return this.normalize();
        }, b.prototype.insertNode = function (a) {
            var b = this.wrapBodyInlineWithPara().deleteContents(), c = Cb.splitPoint(b.getStartPoint(), Cb.isInline(a));
            return c.rightNode ? c.rightNode.parentNode.insertBefore(a, c.rightNode) : c.container.appendChild(a),
                a;
        }, b.prototype.pasteHTML = function (b) {
            var c = a("<div></div>").html(b)[0], d = B.from(c.childNodes), e = this.wrapBodyInlineWithPara().deleteContents();
            return 0 < e.so && (d = d.reverse()), d = d.map(function (a) {
                return e.insertNode(a);
            }), 0 < e.so && (d = d.reverse()), d;
        }, b.prototype.toString = function () {
            var a = this.nativeRange();
            return L.isW3CRangeSupport ? a.toString() : a.text;
        }, b.prototype.getWordRange = function (a) {
            var c = this.getEndPoint();
            if (!Cb.isCharPoint(c)) return this;
            var d = Cb.prevPointUntil(c, function (a) {
                return !Cb.isCharPoint(a);
            });
            return a && (c = Cb.nextPointUntil(c, function (a) {
                return !Cb.isCharPoint(a);
            })), new b(d.node, d.offset, c.node, c.offset);
        }, b.prototype.bookmark = function (a) {
            return {
                s: {
                    path: Cb.makeOffsetPath(a, this.sc),
                    offset: this.so
                },
                e: {
                    path: Cb.makeOffsetPath(a, this.ec),
                    offset: this.eo
                }
            };
        }, b.prototype.paraBookmark = function (a) {
            return {
                s: {
                    path: B.tail(Cb.makeOffsetPath(B.head(a), this.sc)),
                    offset: this.so
                },
                e: {
                    path: B.tail(Cb.makeOffsetPath(B.last(a), this.ec)),
                    offset: this.eo
                }
            };
        }, b.prototype.getClientRects = function () {
            return this.nativeRange().getClientRects();
        }, b;
    }(), Gb = {
        create: function (a, b, c, d) {
            if (4 === arguments.length) return new Fb(a, b, c, d);
            if (2 === arguments.length) return new Fb(c = a, d = b, c, d);
            var e = this.createFromSelection();
            return e || 1 !== arguments.length ? e : (e = this.createFromNode(a)).collapse(Cb.emptyPara === a.innerHTML);
        },
        createFromSelection: function () {
            var a, b, c, d;
            if (L.isW3CRangeSupport) {
                var e = document.getSelection();
                if (!e || 0 === e.rangeCount) return null;
                if (Cb.isBody(e.anchorNode)) return null;
                var f = e.getRangeAt(0);
                a = f.startContainer, b = f.startOffset, c = f.endContainer, d = f.endOffset;
            } else {
                var g = document.selection.createRange(), h = g.duplicate();
                h.collapse(!1);
                var i = g;
                i.collapse(!0);
                var j = Db(i, !0), k = Db(h, !1);
                Cb.isText(j.node) && Cb.isLeftEdgePoint(j) && Cb.isTextNode(k.node) && Cb.isRightEdgePoint(k) && k.node.nextSibling === j.node && (j = k),
                    a = j.cont, b = j.offset, c = k.cont, d = k.offset;
            }
            return new Fb(a, b, c, d);
        },
        createFromNode: function (a) {
            var b = a, c = 0, d = a, e = Cb.nodeLength(d);
            return Cb.isVoid(b) && (c = Cb.listPrev(b).length - 1, b = b.parentNode), Cb.isBR(d) ? (e = Cb.listPrev(d).length - 1,
                d = d.parentNode) : Cb.isVoid(d) && (e = Cb.listPrev(d).length, d = d.parentNode),
                this.create(b, c, d, e);
        },
        createFromNodeBefore: function (a) {
            return this.createFromNode(a).collapse(!0);
        },
        createFromNodeAfter: function (a) {
            return this.createFromNode(a).collapse();
        },
        createFromBookmark: function (a, b) {
            var c = Cb.fromOffsetPath(a, b.s.path), d = b.s.offset, e = Cb.fromOffsetPath(a, b.e.path), f = b.e.offset;
            return new Fb(c, d, e, f);
        },
        createFromParaBookmark: function (a, b) {
            var c = a.s.offset, d = a.e.offset, e = Cb.fromOffsetPath(B.head(b), a.s.path), f = Cb.fromOffsetPath(B.last(b), a.e.path);
            return new Fb(e, c, f, d);
        }
    };
    a.summernote = a.summernote || {
        lang: {}
    }, a.extend(a.summernote.lang, {
        "en-US": {
            font: {
                bold: "Bold",
                italic: "Italic",
                underline: "Underline",
                clear: "Remove Font Style",
                height: "Line Height",
                name: "Font Family",
                strikethrough: "Strikethrough",
                subscript: "Subscript",
                superscript: "Superscript",
                size: "Font Size"
            },
            image: {
                image: "Picture",
                insert: "Insert Image",
                resizeFull: "Resize Full",
                resizeHalf: "Resize Half",
                resizeQuarter: "Resize Quarter",
                floatLeft: "Float Left",
                floatRight: "Float Right",
                floatNone: "Float None",
                shapeRounded: "Shape: Rounded",
                shapeCircle: "Shape: Circle",
                shapeThumbnail: "Shape: Thumbnail",
                shapeNone: "Shape: None",
                dragImageHere: "Drag image or text here",
                dropImage: "Drop image or Text",
                selectFromFiles: "Select from files",
                maximumFileSize: "Maximum file size",
                maximumFileSizeError: "Maximum file size exceeded.",
                url: "Image URL",
                remove: "Remove Image",
                original: "Original"
            },
            video: {
                video: "Video",
                videoLink: "Video Link",
                insert: "Insert Video",
                url: "Video URL",
                providers: "(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"
            },
            link: {
                link: "Link",
                insert: "Insert Link",
                unlink: "Unlink",
                edit: "Edit",
                textToDisplay: "Text to display",
                url: "To what URL should this link go?",
                openInNewWindow: "Open in new window"
            },
            table: {
                table: "Table",
                addRowAbove: "Add row above",
                addRowBelow: "Add row below",
                addColLeft: "Add column left",
                addColRight: "Add column right",
                delRow: "Delete row",
                delCol: "Delete column",
                delTable: "Delete table"
            },
            hr: {
                insert: "Insert Horizontal Rule"
            },
            style: {
                style: "Style",
                p: "Normal",
                blockquote: "Quote",
                pre: "Code",
                h1: "Header 1",
                h2: "Header 2",
                h3: "Header 3",
                h4: "Header 4",
                h5: "Header 5",
                h6: "Header 6"
            },
            lists: {
                unordered: "Unordered list",
                ordered: "Ordered list"
            },
            options: {
                help: "Help",
                fullscreen: "Full Screen",
                codeview: "Code View"
            },
            paragraph: {
                paragraph: "Paragraph",
                outdent: "Outdent",
                indent: "Indent",
                left: "Align left",
                center: "Align center",
                right: "Align right",
                justify: "Justify full"
            },
            color: {
                recent: "Recent Color",
                more: "More Color",
                background: "Background Color",
                foreground: "Foreground Color",
                transparent: "Transparent",
                setTransparent: "Set transparent",
                reset: "Reset",
                resetToDefault: "Reset to default",
                cpSelect: "Select"
            },
            shortcut: {
                shortcuts: "Keyboard shortcuts",
                close: "Close",
                textFormatting: "Text formatting",
                action: "Action",
                paragraphFormatting: "Paragraph formatting",
                documentStyle: "Document Style",
                extraKeys: "Extra keys"
            },
            help: {
                insertParagraph: "Insert Paragraph",
                undo: "Undoes the last command",
                redo: "Redoes the last command",
                tab: "Tab",
                untab: "Untab",
                bold: "Set a bold style",
                italic: "Set a italic style",
                underline: "Set a underline style",
                strikethrough: "Set a strikethrough style",
                removeFormat: "Clean a style",
                justifyLeft: "Set left align",
                justifyCenter: "Set center align",
                justifyRight: "Set right align",
                justifyFull: "Set full align",
                insertUnorderedList: "Toggle unordered list",
                insertOrderedList: "Toggle ordered list",
                outdent: "Outdent on current paragraph",
                indent: "Indent on current paragraph",
                formatPara: "Change current block's format as a paragraph(P tag)",
                formatH1: "Change current block's format as H1",
                formatH2: "Change current block's format as H2",
                formatH3: "Change current block's format as H3",
                formatH4: "Change current block's format as H4",
                formatH5: "Change current block's format as H5",
                formatH6: "Change current block's format as H6",
                insertHorizontalRule: "Insert horizontal rule",
                "linkDialog.show": "Show Link Dialog"
            },
            history: {
                undo: "Undo",
                redo: "Redo"
            },
            specialChar: {
                specialChar: "SPECIAL CHARACTERS",
                select: "Select Special characters"
            }
        }
    });
    var Hb = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SPACE: 32,
        DELETE: 46,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        NUM0: 48,
        NUM1: 49,
        NUM2: 50,
        NUM3: 51,
        NUM4: 52,
        NUM5: 53,
        NUM6: 54,
        NUM7: 55,
        NUM8: 56,
        B: 66,
        E: 69,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        R: 82,
        S: 83,
        U: 85,
        V: 86,
        Y: 89,
        Z: 90,
        SLASH: 191,
        LEFTBRACKET: 219,
        BACKSLASH: 220,
        RIGHTBRACKET: 221
    }, Ib = {
        isEdit: function (a) {
            return B.contains([Hb.BACKSPACE, Hb.TAB, Hb.ENTER, Hb.SPACE, Hb.DELETE], a);
        },
        isMove: function (a) {
            return B.contains([Hb.LEFT, Hb.UP, Hb.RIGHT, Hb.DOWN], a);
        },
        nameFromCode: v.invertObject(Hb),
        code: Hb
    };
    var Jb = function () {
        function a(a) {
            this.stack = [], this.stackOffset = -1, this.$editable = a, this.editable = a[0];
        }
        return a.prototype.makeSnapshot = function () {
            var a = Gb.create(this.editable);
            return {
                contents: this.$editable.html(),
                bookmark: a ? a.bookmark(this.editable) : {
                    s: {
                        path: [],
                        offset: 0
                    },
                    e: {
                        path: [],
                        offset: 0
                    }
                }
            };
        }, a.prototype.applySnapshot = function (a) {
            null !== a.contents && this.$editable.html(a.contents), null !== a.bookmark && Gb.createFromBookmark(this.editable, a.bookmark).select();
        }, a.prototype.rewind = function () {
            this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(),
                this.stackOffset = 0, this.applySnapshot(this.stack[this.stackOffset]);
        }, a.prototype.commit = function () {
            this.stack = [], this.stackOffset = -1, this.recordUndo();
        }, a.prototype.reset = function () {
            this.stack = [], this.stackOffset = -1, this.$editable.html(""), this.recordUndo();
        }, a.prototype.undo = function () {
            this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(),
                0 < this.stackOffset && (this.stackOffset-- , this.applySnapshot(this.stack[this.stackOffset]));
        }, a.prototype.redo = function () {
            this.stack.length - 1 > this.stackOffset && (this.stackOffset++ , this.applySnapshot(this.stack[this.stackOffset]));
        }, a.prototype.recordUndo = function () {
            this.stackOffset++ , this.stack.length > this.stackOffset && (this.stack = this.stack.slice(0, this.stackOffset)),
                this.stack.push(this.makeSnapshot());
        }, a;
    }(), Kb = function () {
        function b() { }
        return b.prototype.jQueryCSS = function (b, c) {
            if (L.jqueryVersion < 1.9) {
                var d = {};
                return a.each(c, function (a, c) {
                    d[c] = b.css(c);
                }), d;
            }
            return b.css(c);
        }, b.prototype.fromNode = function (a) {
            var b = this.jQueryCSS(a, ["font-family", "font-size", "text-align", "list-style-type", "line-height"]) || {};
            return b["font-size"] = parseInt(b["font-size"], 10), b;
        }, b.prototype.stylePara = function (b, c) {
            a.each(b.nodes(Cb.isPara, {
                includeAncestor: !0
            }), function (b, d) {
                a(d).css(c);
            });
        }, b.prototype.styleNodes = function (b, c) {
            b = b.splitText();
            var d = c && c.nodeName || "SPAN", e = !(!c || !c.expandClosestSibling), f = !(!c || !c.onlyPartialContains);
            if (b.isCollapsed()) return [b.insertNode(Cb.create(d))];
            var g = Cb.makePredByNodeName(d), h = b.nodes(Cb.isText, {
                fullyContains: !0
            }).map(function (a) {
                return Cb.singleChildAncestor(a, g) || Cb.wrap(a, d);
            });
            if (e) {
                if (f) {
                    var i = b.nodes();
                    g = v.and(g, function (a) {
                        return B.contains(i, a);
                    });
                }
                return h.map(function (b) {
                    var c = Cb.withClosestSiblings(b, g), d = B.head(c), e = B.tail(c);
                    return a.each(e, function (a, b) {
                        Cb.appendChildNodes(d, b.childNodes), Cb.remove(b);
                    }), B.head(c);
                });
            }
            return h;
        }, b.prototype.current = function (b) {
            var c = a(Cb.isElement(b.sc) ? b.sc : b.sc.parentNode), d = this.fromNode(c);
            try {
                d = a.extend(d, {
                    "font-bold": document.queryCommandState("bold") ? "bold" : "normal",
                    "font-italic": document.queryCommandState("italic") ? "italic" : "normal",
                    "font-underline": document.queryCommandState("underline") ? "underline" : "normal",
                    "font-subscript": document.queryCommandState("subscript") ? "subscript" : "normal",
                    "font-superscript": document.queryCommandState("superscript") ? "superscript" : "normal",
                    "font-strikethrough": document.queryCommandState("strikethrough") ? "strikethrough" : "normal",
                    "font-family": document.queryCommandValue("fontname") || d["font-family"]
                });
            } catch (b) { }
            if (b.isOnList()) {
                var e = -1 < a.inArray(d["list-style-type"], ["circle", "disc", "disc-leading-zero", "square"]);
                d["list-style"] = e ? "unordered" : "ordered";
            } else d["list-style"] = "none";
            var f = Cb.ancestor(b.sc, Cb.isPara);
            if (f && f.style["line-height"]) d["line-height"] = f.style.lineHeight; else {
                var g = parseInt(d["line-height"], 10) / parseInt(d["font-size"], 10);
                d["line-height"] = g.toFixed(1);
            }
            return d.anchor = b.isOnAnchor() && Cb.ancestor(b.sc, Cb.isAnchor), d.ancestors = Cb.listAncestor(b.sc, Cb.isEditable),
                d.range = b, d;
        }, b;
    }(), Lb = function () {
        function b() { }
        return b.prototype.insertOrderedList = function (a) {
            this.toggleList("OL", a);
        }, b.prototype.insertUnorderedList = function (a) {
            this.toggleList("UL", a);
        }, b.prototype.indent = function (b) {
            var c = this, d = Gb.create(b).wrapBodyInlineWithPara(), e = d.nodes(Cb.isPara, {
                includeAncestor: !0
            }), f = B.clusterBy(e, v.peq2("parentNode"));
            a.each(f, function (b, d) {
                var e = B.head(d);
                if (Cb.isLi(e)) {
                    var f = c.findList(e.previousSibling);
                    f ? d.map(function (a) {
                        return f.appendChild(a);
                    }) : (c.wrapList(d, e.parentNode.nodeName), d.map(function (a) {
                        return a.parentNode;
                    }).map(function (a) {
                        return c.appendToPrevious(a);
                    }));
                } else a.each(d, function (b, c) {
                    a(c).css("marginLeft", function (a, b) {
                        return (parseInt(b, 10) || 0) + 25;
                    });
                });
            }), d.select();
        }, b.prototype.outdent = function (b) {
            var c = this, d = Gb.create(b).wrapBodyInlineWithPara(), e = d.nodes(Cb.isPara, {
                includeAncestor: !0
            }), f = B.clusterBy(e, v.peq2("parentNode"));
            a.each(f, function (b, d) {
                var e = B.head(d);
                Cb.isLi(e) ? c.releaseList([d]) : a.each(d, function (b, c) {
                    a(c).css("marginLeft", function (a, b) {
                        return 25 < (b = parseInt(b, 10) || 0) ? b - 25 : "";
                    });
                });
            }), d.select();
        }, b.prototype.toggleList = function (b, c) {
            var d = this, e = Gb.create(c).wrapBodyInlineWithPara(), f = e.nodes(Cb.isPara, {
                includeAncestor: !0
            }), g = e.paraBookmark(f), h = B.clusterBy(f, v.peq2("parentNode"));
            if (B.find(f, Cb.isPurePara)) {
                var i = [];
                a.each(h, function (a, c) {
                    i = i.concat(d.wrapList(c, b));
                }), f = i;
            } else {
                var j = e.nodes(Cb.isList, {
                    includeAncestor: !0
                }).filter(function (c) {
                    return !a.nodeName(c, b);
                });
                j.length ? a.each(j, function (a, c) {
                    Cb.replace(c, b);
                }) : f = this.releaseList(h, !0);
            }
            Gb.createFromParaBookmark(g, f).select();
        }, b.prototype.wrapList = function (a, b) {
            var c = B.head(a), d = B.last(a), e = Cb.isList(c.previousSibling) && c.previousSibling, f = Cb.isList(d.nextSibling) && d.nextSibling, g = e || Cb.insertAfter(Cb.create(b || "UL"), d);
            return a = a.map(function (a) {
                return Cb.isPurePara(a) ? Cb.replace(a, "LI") : a;
            }), Cb.appendChildNodes(g, a), f && (Cb.appendChildNodes(g, B.from(f.childNodes)),
                Cb.remove(f)), a;
        }, b.prototype.releaseList = function (b, c) {
            var d = this, e = [];
            return a.each(b, function (b, f) {
                var g = B.head(f), h = B.last(f), i = c ? Cb.lastAncestor(g, Cb.isList) : g.parentNode, j = i.parentNode;
                if ("LI" === i.parentNode.nodeName) f.map(function (a) {
                    var b = d.findNextSiblings(a);
                    j.nextSibling ? j.parentNode.insertBefore(a, j.nextSibling) : j.parentNode.appendChild(a),
                        b.length && (d.wrapList(b, i.nodeName), a.appendChild(b[0].parentNode));
                }), 0 === i.children.length && j.removeChild(i), 0 === j.childNodes.length && j.parentNode.removeChild(j); else {
                    var k = 1 < i.childNodes.length ? Cb.splitTree(i, {
                        node: h.parentNode,
                        offset: Cb.position(h) + 1
                    }, {
                            isSkipPaddingBlankHTML: !0
                        }) : null, l = Cb.splitTree(i, {
                            node: g.parentNode,
                            offset: Cb.position(g)
                        }, {
                                isSkipPaddingBlankHTML: !0
                            });
                    f = c ? Cb.listDescendant(l, Cb.isLi) : B.from(l.childNodes).filter(Cb.isLi), !c && Cb.isList(i.parentNode) || (f = f.map(function (a) {
                        return Cb.replace(a, "P");
                    })), a.each(B.from(f).reverse(), function (a, b) {
                        Cb.insertAfter(b, i);
                    });
                    var m = B.compact([i, l, k]);
                    a.each(m, function (b, c) {
                        var d = [c].concat(Cb.listDescendant(c, Cb.isList));
                        a.each(d.reverse(), function (a, b) {
                            Cb.nodeLength(b) || Cb.remove(b, !0);
                        });
                    });
                }
                e = e.concat(f);
            }), e;
        }, b.prototype.appendToPrevious = function (a) {
            return a.previousSibling ? Cb.appendChildNodes(a.previousSibling, [a]) : this.wrapList([a], "LI");
        }, b.prototype.findList = function (a) {
            return a ? B.find(a.children, function (a) {
                return -1 < ["OL", "UL"].indexOf(a.nodeName);
            }) : null;
        }, b.prototype.findNextSiblings = function (a) {
            for (var b = []; a.nextSibling;) b.push(a.nextSibling), a = a.nextSibling;
            return b;
        }, b;
    }(), Mb = function () {
        function b(a) {
            this.bullet = new Lb(), this.options = a.options;
        }
        return b.prototype.insertTab = function (a, b) {
            var c = Cb.createText(new Array(b + 1).join(Cb.NBSP_CHAR));
            (a = a.deleteContents()).insertNode(c, !0), (a = Gb.create(c, b)).select();
        }, b.prototype.insertParagraph = function (b, c) {
            c = (c = (c = c || Gb.create(b)).deleteContents()).wrapBodyInlineWithPara();
            var d, e = Cb.ancestor(c.sc, Cb.isPara);
            if (e) {
                if (Cb.isEmpty(e) && Cb.isLi(e)) return void this.bullet.toggleList(e.parentNode.nodeName);
                var f = null;
                if (1 === this.options.blockquoteBreakingLevel ? f = Cb.ancestor(e, Cb.isBlockquote) : 2 === this.options.blockquoteBreakingLevel && (f = Cb.lastAncestor(e, Cb.isBlockquote)),
                    f) {
                    d = a(Cb.emptyPara)[0], Cb.isRightEdgePoint(c.getStartPoint()) && Cb.isBR(c.sc.nextSibling) && a(c.sc.nextSibling).remove();
                    var g = Cb.splitTree(f, c.getStartPoint(), {
                        isDiscardEmptySplits: !0
                    });
                    g ? g.parentNode.insertBefore(d, g) : Cb.insertAfter(d, f);
                } else {
                    d = Cb.splitTree(e, c.getStartPoint());
                    var h = Cb.listDescendant(e, Cb.isEmptyAnchor);
                    h = h.concat(Cb.listDescendant(d, Cb.isEmptyAnchor)), a.each(h, function (a, b) {
                        Cb.remove(b);
                    }), (Cb.isHeading(d) || Cb.isPre(d) || Cb.isCustomStyleTag(d)) && Cb.isEmpty(d) && (d = Cb.replace(d, "p"));
                }
            } else {
                var i = c.sc.childNodes[c.so];
                d = a(Cb.emptyPara)[0], i ? c.sc.insertBefore(d, i) : c.sc.appendChild(d);
            }
            Gb.create(d, 0).normalize().select().scrollIntoView(b);
        }, b;
    }(), Nb = function (a, b, c, d) {
        var e = {
            colPos: 0,
            rowPos: 0
        }, f = [], g = [];
        function h(a, b, c, d, e, g, h) {
            var i = {
                baseRow: c,
                baseCell: d,
                isRowSpan: e,
                isColSpan: g,
                isVirtual: h
            };
            f[a] || (f[a] = []), f[a][b] = i;
        }
        function i(a, b) {
            if (!f[a]) return b;
            if (!f[a][b]) return b;
            for (var c = b; f[a][c];) if (c++ , !f[a][c]) return c;
        }
        function j(a, b) {
            var c = i(a.rowIndex, b.cellIndex), d = 1 < b.colSpan, f = 1 < b.rowSpan, g = a.rowIndex === e.rowPos && b.cellIndex === e.colPos;
            h(a.rowIndex, c, a, b, f, d, !1);
            var j = b.attributes.rowSpan ? parseInt(b.attributes.rowSpan.value, 10) : 0;
            if (1 < j) for (var l = 1; l < j; l++) {
                var m = a.rowIndex + l;
                k(m, c, b, g), h(m, c, a, b, !0, d, !0);
            }
            var n = b.attributes.colSpan ? parseInt(b.attributes.colSpan.value, 10) : 0;
            if (1 < n) for (var o = 1; o < n; o++) {
                var p = i(a.rowIndex, c + o);
                k(a.rowIndex, p, b, g), h(a.rowIndex, p, a, b, f, !0, !0);
            }
        }
        function k(a, b, c, d) {
            a === e.rowPos && e.colPos >= c.cellIndex && c.cellIndex <= b && !d && e.colPos++;
        }
        function l(a) {
            switch (b) {
                case Nb.where.Column:
                    if (a.isColSpan) return Nb.resultAction.SubtractSpanCount;
                    break;

                case Nb.where.Row:
                    if (!a.isVirtual && a.isRowSpan) return Nb.resultAction.AddCell;
                    if (a.isRowSpan) return Nb.resultAction.SubtractSpanCount;
            }
            return Nb.resultAction.RemoveCell;
        }
        function m(a) {
            switch (b) {
                case Nb.where.Column:
                    if (a.isColSpan) return Nb.resultAction.SumSpanCount;
                    if (a.isRowSpan && a.isVirtual) return Nb.resultAction.Ignore;
                    break;

                case Nb.where.Row:
                    if (a.isRowSpan) return Nb.resultAction.SumSpanCount;
                    if (a.isColSpan && a.isVirtual) return Nb.resultAction.Ignore;
            }
            return Nb.resultAction.AddCell;
        }
        this.getActionList = function () {
            for (var a, d, h, i = b === Nb.where.Row ? e.rowPos : -1, j = b === Nb.where.Column ? e.colPos : -1, k = 0, n = !0; n;) {
                var o = 0 <= i ? i : k, p = 0 <= j ? j : k, q = f[o];
                if (!q) return n = !1, g;
                var r = q[p];
                if (!r) return n = !1, g;
                var s = Nb.resultAction.Ignore;
                switch (c) {
                    case Nb.requestAction.Add:
                        s = m(r);
                        break;

                    case Nb.requestAction.Delete:
                        s = l(r);
                }
                g.push((a = s, d = o, h = p, {
                    baseCell: r.baseCell,
                    action: a,
                    virtualTable: {
                        rowIndex: d,
                        cellIndex: h
                    }
                })), k++;
            }
            return g;
        }, a && a.tagName && ("td" === a.tagName.toLowerCase() || "th" === a.tagName.toLowerCase()) ? (e.colPos = a.cellIndex,
            a.parentElement && a.parentElement.tagName && "tr" === a.parentElement.tagName.toLowerCase() ? e.rowPos = a.parentElement.rowIndex : console.error("Impossible to identify start Row point.", a)) : console.error("Impossible to identify start Cell point.", a),
            function () {
                for (var a = d.rows, b = 0; b < a.length; b++) for (var c = a[b].cells, e = 0; e < c.length; e++) j(a[b], c[e]);
            }();
    };
    Nb.where = {
        Row: 0,
        Column: 1
    }, Nb.requestAction = {
        Add: 0,
        Delete: 1
    }, Nb.resultAction = {
        Ignore: 0,
        SubtractSpanCount: 1,
        RemoveCell: 2,
        AddCell: 3,
        SumSpanCount: 4
    };
    var Ob, Pb = function () {
        function b() { }
        return b.prototype.tab = function (a, b) {
            var c = Cb.ancestor(a.commonAncestor(), Cb.isCell), d = Cb.ancestor(c, Cb.isTable), e = Cb.listDescendant(d, Cb.isCell), f = B[b ? "prev" : "next"](e, c);
            f && Gb.create(f, 0).select();
        }, b.prototype.addRow = function (b, c) {
            for (var d = Cb.ancestor(b.commonAncestor(), Cb.isCell), e = a(d).closest("tr"), f = this.recoverAttributes(e), g = a("<tr" + f + "></tr>"), h = new Nb(d, Nb.where.Row, Nb.requestAction.Add, a(e).closest("table")[0]).getActionList(), i = 0; i < h.length; i++) {
                var j = h[i], k = this.recoverAttributes(j.baseCell);
                switch (j.action) {
                    case Nb.resultAction.AddCell:
                        g.append("<td" + k + ">" + Cb.blank + "</td>");
                        break;

                    case Nb.resultAction.SumSpanCount:
                        if ("top" === c) if ((j.baseCell.parent ? j.baseCell.closest("tr").rowIndex : 0) <= e[0].rowIndex) {
                            var l = a("<div></div>").append(a("<td" + k + ">" + Cb.blank + "</td>").removeAttr("rowspan")).html();
                            g.append(l);
                            break;
                        }
                        var m = parseInt(j.baseCell.rowSpan, 10);
                        m++ , j.baseCell.setAttribute("rowSpan", m);
                }
            }
            if ("top" === c) e.before(g); else {
                if (1 < d.rowSpan) {
                    var n = e[0].rowIndex + (d.rowSpan - 2);
                    return void a(a(e).parent().find("tr")[n]).after(a(g));
                }
                e.after(g);
            }
        }, b.prototype.addCol = function (b, c) {
            var d = Cb.ancestor(b.commonAncestor(), Cb.isCell), e = a(d).closest("tr");
            a(e).siblings().push(e);
            for (var f = new Nb(d, Nb.where.Column, Nb.requestAction.Add, a(e).closest("table")[0]).getActionList(), g = 0; g < f.length; g++) {
                var h = f[g], i = this.recoverAttributes(h.baseCell);
                switch (h.action) {
                    case Nb.resultAction.AddCell:
                        "right" === c ? a(h.baseCell).after("<td" + i + ">" + Cb.blank + "</td>") : a(h.baseCell).before("<td" + i + ">" + Cb.blank + "</td>");
                        break;

                    case Nb.resultAction.SumSpanCount:
                        if ("right" === c) {
                            var j = parseInt(h.baseCell.colSpan, 10);
                            j++ , h.baseCell.setAttribute("colSpan", j);
                        } else a(h.baseCell).before("<td" + i + ">" + Cb.blank + "</td>");
                }
            }
        }, b.prototype.recoverAttributes = function (a) {
            var b = "";
            if (!a) return b;
            for (var c = a.attributes || [], d = 0; d < c.length; d++) "id" !== c[d].name.toLowerCase() && c[d].specified && (b += " " + c[d].name + "='" + c[d].value + "'");
            return b;
        }, b.prototype.deleteRow = function (b) {
            for (var c = Cb.ancestor(b.commonAncestor(), Cb.isCell), d = a(c).closest("tr"), e = d.children("td, th").index(a(c)), f = d[0].rowIndex, g = new Nb(c, Nb.where.Row, Nb.requestAction.Delete, a(d).closest("table")[0]).getActionList(), h = 0; h < g.length; h++) if (g[h]) {
                var i = g[h].baseCell, j = g[h].virtualTable, k = i.rowSpan && 1 < i.rowSpan, l = k ? parseInt(i.rowSpan, 10) : 0;
                switch (g[h].action) {
                    case Nb.resultAction.Ignore:
                        continue;

                    case Nb.resultAction.AddCell:
                        var m = d.next("tr")[0];
                        if (!m) continue;
                        var n = d[0].cells[e];
                        k && (2 < l ? (l-- , m.insertBefore(n, m.cells[e]), m.cells[e].setAttribute("rowSpan", l),
                            m.cells[e].innerHTML = "") : 2 === l && (m.insertBefore(n, m.cells[e]), m.cells[e].removeAttribute("rowSpan"),
                                m.cells[e].innerHTML = ""));
                        continue;

                    case Nb.resultAction.SubtractSpanCount:
                        k && (2 < l ? (l-- , i.setAttribute("rowSpan", l), j.rowIndex !== f && i.cellIndex === e && (i.innerHTML = "")) : 2 === l && (i.removeAttribute("rowSpan"),
                            j.rowIndex !== f && i.cellIndex === e && (i.innerHTML = "")));
                        continue;

                    case Nb.resultAction.RemoveCell:
                        continue;
                }
            }
            d.remove();
        }, b.prototype.deleteCol = function (b) {
            for (var c = Cb.ancestor(b.commonAncestor(), Cb.isCell), d = a(c).closest("tr"), e = d.children("td, th").index(a(c)), f = new Nb(c, Nb.where.Column, Nb.requestAction.Delete, a(d).closest("table")[0]).getActionList(), g = 0; g < f.length; g++) if (f[g]) switch (f[g].action) {
                case Nb.resultAction.Ignore:
                    continue;

                case Nb.resultAction.SubtractSpanCount:
                    var h = f[g].baseCell;
                    if (h.colSpan && 1 < h.colSpan) {
                        var i = h.colSpan ? parseInt(h.colSpan, 10) : 0;
                        2 < i ? (i-- , h.setAttribute("colSpan", i), h.cellIndex === e && (h.innerHTML = "")) : 2 === i && (h.removeAttribute("colSpan"),
                            h.cellIndex === e && (h.innerHTML = ""));
                    }
                    continue;

                case Nb.resultAction.RemoveCell:
                    Cb.remove(f[g].baseCell, !0);
                    continue;
            }
        }, b.prototype.createTable = function (b, c, d) {
            for (var e, f = [], g = 0; g < b; g++) f.push("<td>" + Cb.blank + "</td>");
            e = f.join("");
            for (var h, i = [], j = 0; j < c; j++) i.push("<tr>" + e + "</tr>");
            h = i.join("");
            var k = a("<table>" + h + "</table>");
            return d && d.tableClassName && k.addClass(d.tableClassName), k[0];
        }, b.prototype.deleteTable = function (b) {
            var c = Cb.ancestor(b.commonAncestor(), Cb.isCell);
            a(c).closest("table").remove();
        }, b;
    }(), Qb = function () {
        function b(b) {
            var c = this;
            this.context = b, this.$note = b.layoutInfo.note, this.$editor = b.layoutInfo.editor,
                this.$editable = b.layoutInfo.editable, this.options = b.options, this.lang = this.options.langInfo,
                this.editable = this.$editable[0], this.lastRange = null, this.style = new Kb(),
                this.table = new Pb(), this.typing = new Mb(b), this.bullet = new Lb(), this.history = new Jb(this.$editable),
                this.context.memo("help.undo", this.lang.help.undo), this.context.memo("help.redo", this.lang.help.redo),
                this.context.memo("help.tab", this.lang.help.tab), this.context.memo("help.untab", this.lang.help.untab),
                this.context.memo("help.insertParagraph", this.lang.help.insertParagraph), this.context.memo("help.insertOrderedList", this.lang.help.insertOrderedList),
                this.context.memo("help.insertUnorderedList", this.lang.help.insertUnorderedList),
                this.context.memo("help.indent", this.lang.help.indent), this.context.memo("help.outdent", this.lang.help.outdent),
                this.context.memo("help.formatPara", this.lang.help.formatPara), this.context.memo("help.insertHorizontalRule", this.lang.help.insertHorizontalRule),
                this.context.memo("help.fontName", this.lang.help.fontName);
            for (var d = ["bold", "italic", "underline", "strikethrough", "superscript", "subscript", "justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "formatBlock", "removeFormat", "backColor"], e = 0, f = d.length; e < f; e++) this[d[e]] = function (a) {
                return function (b) {
                    c.beforeCommand(), document.execCommand(a, !1, b), c.afterCommand(!0);
                };
            }(d[e]), this.context.memo("help." + d[e], this.lang.help[d[e]]);
            this.fontName = this.wrapCommand(function (a) {
                return c.fontStyling("font-family", "'" + a + "'");
            }), this.fontSize = this.wrapCommand(function (a) {
                return c.fontStyling("font-size", a + "px");
            });
            for (e = 1; e <= 6; e++) this["formatH" + e] = function (a) {
                return function () {
                    c.formatBlock("H" + a);
                };
            }(e), this.context.memo("help.formatH" + e, this.lang.help["formatH" + e]);
            this.insertParagraph = this.wrapCommand(function () {
                c.typing.insertParagraph(c.editable);
            }), this.insertOrderedList = this.wrapCommand(function () {
                c.bullet.insertOrderedList(c.editable);
            }), this.insertUnorderedList = this.wrapCommand(function () {
                c.bullet.insertUnorderedList(c.editable);
            }), this.indent = this.wrapCommand(function () {
                c.bullet.indent(c.editable);
            }), this.outdent = this.wrapCommand(function () {
                c.bullet.outdent(c.editable);
            }), this.insertNode = this.wrapCommand(function (b) {
                c.isLimited(a(b).text().length) || (c.createRange().insertNode(b), Gb.createFromNodeAfter(b).select());
            }), this.insertText = this.wrapCommand(function (a) {
                if (!c.isLimited(a.length)) {
                    var b = c.createRange().insertNode(Cb.createText(a));
                    Gb.create(b, Cb.nodeLength(b)).select();
                }
            }), this.pasteHTML = this.wrapCommand(function (a) {
                if (!c.isLimited(a.length)) {
                    var b = c.createRange().pasteHTML(a);
                    Gb.createFromNodeAfter(B.last(b)).select();
                }
            }), this.formatBlock = this.wrapCommand(function (a, b) {
                var d = c.options.callbacks.onApplyCustomStyle;
                d ? d.call(c, b, c.context, c.onFormatBlock) : c.onFormatBlock(a, b);
            }), this.insertHorizontalRule = this.wrapCommand(function () {
                var a = c.createRange().insertNode(Cb.create("HR"));
                a.nextSibling && Gb.create(a.nextSibling, 0).normalize().select();
            }), this.lineHeight = this.wrapCommand(function (a) {
                c.style.stylePara(c.createRange(), {
                    lineHeight: a
                });
            }), this.createLink = this.wrapCommand(function (b) {
                var d = b.url, e = b.text, f = b.isNewWindow, g = b.range || c.createRange(), h = e.length - g.toString().length;
                if (!(0 < h && c.isLimited(h))) {
                    var i = g.toString() !== e;
                    "string" == typeof d && (d = d.trim()), c.options.onCreateLink ? d = c.options.onCreateLink(d) : /^\.?\/(.*)/.test(d) || (d = /^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(d) ? d : "http://" + d);
                    var j = [];
                    if (i) {
                        var k = (g = g.deleteContents()).insertNode(a("<A>" + e + "</A>")[0]);
                        j.push(k);
                    } else j = c.style.styleNodes(g, {
                        nodeName: "A",
                        expandClosestSibling: !0,
                        onlyPartialContains: !0
                    });
                    a.each(j, function (b, c) {
                        a(c).attr("href", d), f ? a(c).attr("target", "_blank") : a(c).removeAttr("target");
                    });
                    var l = Gb.createFromNodeBefore(B.head(j)).getStartPoint(), m = Gb.createFromNodeAfter(B.last(j)).getEndPoint();
                    Gb.create(l.node, l.offset, m.node, m.offset).select();
                }
            }), this.color = this.wrapCommand(function (a) {
                var b = a.foreColor, c = a.backColor;
                b && document.execCommand("foreColor", !1, b), c && document.execCommand("backColor", !1, c);
            }), this.foreColor = this.wrapCommand(function (a) {
                document.execCommand("styleWithCSS", !1, !0), document.execCommand("foreColor", !1, a);
            }), this.insertTable = this.wrapCommand(function (a) {
                var b = a.split("x");
                c.createRange().deleteContents().insertNode(c.table.createTable(b[0], b[1], c.options));
            }), this.removeMedia = this.wrapCommand(function () {
                var b = a(c.restoreTarget()).parent();
                b.parent("figure").length ? b.parent("figure").remove() : b = a(c.restoreTarget()).detach(),
                    c.context.triggerEvent("media.delete", b, c.$editable);
            }), this.floatMe = this.wrapCommand(function (b) {
                var d = a(c.restoreTarget());
                d.toggleClass("note-float-left", "left" === b), d.toggleClass("note-float-right", "right" === b),
                    d.css("float", b);
            }), this.resize = this.wrapCommand(function (b) {
                a(c.restoreTarget()).css({
                    width: 100 * b + "%",
                    height: ""
                });
            });
        }
        return b.prototype.initialize = function () {
            var a = this;
            this.$editable.on("keydown", function (b) {
                if (b.keyCode === Ib.code.ENTER && a.context.triggerEvent("enter", b), a.context.triggerEvent("keydown", b),
                    b.isDefaultPrevented() || (a.options.shortcuts ? a.handleKeyMap(b) : a.preventDefaultEditableShortCuts(b)),
                    a.isLimited(1, b)) return !1;
            }).on("keyup", function (b) {
                a.context.triggerEvent("keyup", b);
            }).on("focus", function (b) {
                a.context.triggerEvent("focus", b);
            }).on("blur", function (b) {
                a.context.triggerEvent("blur", b);
            }).on("mousedown", function (b) {
                a.context.triggerEvent("mousedown", b);
            }).on("mouseup", function (b) {
                a.context.triggerEvent("mouseup", b);
            }).on("scroll", function (b) {
                a.context.triggerEvent("scroll", b);
            }).on("paste", function (b) {
                a.context.triggerEvent("paste", b);
            }), this.$editable.html(Cb.html(this.$note) || Cb.emptyPara), this.$editable.on(L.inputEventName, v.debounce(function () {
                a.context.triggerEvent("change", a.$editable.html());
            }, 10)), this.$editor.on("focusin", function (b) {
                a.context.triggerEvent("focusin", b);
            }).on("focusout", function (b) {
                a.context.triggerEvent("focusout", b);
            }), this.options.airMode || (this.options.width && this.$editor.outerWidth(this.options.width),
                this.options.height && this.$editable.outerHeight(this.options.height), this.options.maxHeight && this.$editable.css("max-height", this.options.maxHeight),
                this.options.minHeight && this.$editable.css("min-height", this.options.minHeight)),
                this.history.recordUndo();
        }, b.prototype.destroy = function () {
            this.$editable.off();
        }, b.prototype.handleKeyMap = function (a) {
            var b = this.options.keyMap[L.isMac ? "mac" : "pc"], c = [];
            a.metaKey && c.push("CMD"), a.ctrlKey && !a.altKey && c.push("CTRL"), a.shiftKey && c.push("SHIFT");
            var d = Ib.nameFromCode[a.keyCode];
            d && c.push(d);
            var e = b[c.join("+")];
            e ? !1 !== this.context.invoke(e) && a.preventDefault() : Ib.isEdit(a.keyCode) && this.afterCommand();
        }, b.prototype.preventDefaultEditableShortCuts = function (a) {
            (a.ctrlKey || a.metaKey) && B.contains([66, 73, 85], a.keyCode) && a.preventDefault();
        }, b.prototype.isLimited = function (a, b) {
            return a = a || 0, (void 0 === b || !(Ib.isMove(b.keyCode) || b.ctrlKey || b.metaKey || B.contains([Ib.code.BACKSPACE, Ib.code.DELETE], b.keyCode))) && 0 < this.options.maxTextLength && this.$editable.text().length + a >= this.options.maxTextLength;
        }, b.prototype.createRange = function () {
            return this.focus(), Gb.create(this.editable);
        }, b.prototype.saveRange = function (a) {
            this.lastRange = this.createRange(), a && this.lastRange.collapse().select();
        }, b.prototype.restoreRange = function () {
            this.lastRange && (this.lastRange.select(), this.focus());
        }, b.prototype.saveTarget = function (a) {
            this.$editable.data("target", a);
        }, b.prototype.clearTarget = function () {
            this.$editable.removeData("target");
        }, b.prototype.restoreTarget = function () {
            return this.$editable.data("target");
        }, b.prototype.currentStyle = function () {
            var a = Gb.create();
            return a && (a = a.normalize()), a ? this.style.current(a) : this.style.fromNode(this.$editable);
        }, b.prototype.styleFromNode = function (a) {
            return this.style.fromNode(a);
        }, b.prototype.undo = function () {
            this.context.triggerEvent("before.command", this.$editable.html()), this.history.undo(),
                this.context.triggerEvent("change", this.$editable.html());
        }, b.prototype.commit = function () {
            this.context.triggerEvent("before.command", this.$editable.html()), this.history.commit(),
                this.context.triggerEvent("change", this.$editable.html());
        }, b.prototype.redo = function () {
            this.context.triggerEvent("before.command", this.$editable.html()), this.history.redo(),
                this.context.triggerEvent("change", this.$editable.html());
        }, b.prototype.beforeCommand = function () {
            this.context.triggerEvent("before.command", this.$editable.html()), this.focus();
        }, b.prototype.afterCommand = function (a) {
            this.normalizeContent(), this.history.recordUndo(), a || this.context.triggerEvent("change", this.$editable.html());
        }, b.prototype.tab = function () {
            var a = this.createRange();
            if (a.isCollapsed() && a.isOnCell()) this.table.tab(a); else {
                if (0 === this.options.tabSize) return !1;
                this.isLimited(this.options.tabSize) || (this.beforeCommand(), this.typing.insertTab(a, this.options.tabSize),
                    this.afterCommand());
            }
        }, b.prototype.untab = function () {
            var a = this.createRange();
            if (a.isCollapsed() && a.isOnCell()) this.table.tab(a, !0); else if (0 === this.options.tabSize) return !1;
        }, b.prototype.wrapCommand = function (a) {
            return function () {
                this.beforeCommand(), a.apply(this, arguments), this.afterCommand();
            };
        }, b.prototype.insertImage = function (b, c) {
            var d, e = this;
            return (d = b, a.Deferred(function (b) {
                var c = a("<img>");
                c.one("load", function () {
                    c.off("error abort"), b.resolve(c);
                }).one("error abort", function () {
                    c.off("load").detach(), b.reject(c);
                }).css({
                    display: "none"
                }).appendTo(document.body).attr("src", d);
            }).promise()).then(function (a) {
                e.beforeCommand(), "function" == typeof c ? c(a) : ("string" == typeof c && a.attr("data-filename", c),
                    a.css("width", Math.min(e.$editable.width(), a.width()))), a.show(), Gb.create(e.editable).insertNode(a[0]),
                    Gb.createFromNodeAfter(a[0]).select(), e.afterCommand();
            }).fail(function (a) {
                e.context.triggerEvent("image.upload.error", a);
            });
        }, b.prototype.insertImagesAsDataURL = function (b) {
            var c = this;
            a.each(b, function (b, d) {
                var e, f = d.name;
                c.options.maximumImageFileSize && c.options.maximumImageFileSize < d.size ? c.context.triggerEvent("image.upload.error", c.lang.image.maximumFileSizeError) : (e = d,
                    a.Deferred(function (b) {
                        a.extend(new FileReader(), {
                            onload: function (a) {
                                var c = a.target.result;
                                b.resolve(c);
                            },
                            onerror: function (a) {
                                b.reject(a);
                            }
                        }).readAsDataURL(e);
                    }).promise()).then(function (a) {
                        return c.insertImage(a, f);
                    }).fail(function () {
                        c.context.triggerEvent("image.upload.error");
                    });
            });
        }, b.prototype.getSelectedText = function () {
            var a = this.createRange();
            return a.isOnAnchor() && (a = Gb.createFromNode(Cb.ancestor(a.sc, Cb.isAnchor))),
                a.toString();
        }, b.prototype.onFormatBlock = function (b, c) {
            if (b = L.isMSIE ? "<" + b + ">" : b, document.execCommand("FormatBlock", !1, b),
                c && c.length) {
                var d = c[0].className || "";
                if (d) {
                    var e = this.createRange();
                    a([e.sc, e.ec]).closest(b).addClass(d);
                }
            }
        }, b.prototype.formatPara = function () {
            this.formatBlock("P");
        }, b.prototype.fontStyling = function (b, c) {
            var d = this.createRange();
            if (d) {
                var e = this.style.styleNodes(d);
                if (a(e).css(b, c), d.isCollapsed()) {
                    var f = B.head(e);
                    f && !Cb.nodeLength(f) && (f.innerHTML = Cb.ZERO_WIDTH_NBSP_CHAR, Gb.createFromNodeAfter(f.firstChild).select(),
                        this.$editable.data("bogus", f));
                }
            }
        }, b.prototype.unlink = function () {
            var a = this.createRange();
            if (a.isOnAnchor()) {
                var b = Cb.ancestor(a.sc, Cb.isAnchor);
                (a = Gb.createFromNode(b)).select(), this.beforeCommand(), document.execCommand("unlink"),
                    this.afterCommand();
            }
        }, b.prototype.getLinkInfo = function () {
            var b = this.createRange().expand(Cb.isAnchor), c = a(B.head(b.nodes(Cb.isAnchor))), d = {
                range: b,
                text: b.toString(),
                url: c.length ? c.attr("href") : ""
            };
            return c.length && (d.isNewWindow = "_blank" === c.attr("target")), d;
        }, b.prototype.addRow = function (a) {
            var b = this.createRange(this.$editable);
            b.isCollapsed() && b.isOnCell() && (this.beforeCommand(), this.table.addRow(b, a),
                this.afterCommand());
        }, b.prototype.addCol = function (a) {
            var b = this.createRange(this.$editable);
            b.isCollapsed() && b.isOnCell() && (this.beforeCommand(), this.table.addCol(b, a),
                this.afterCommand());
        }, b.prototype.deleteRow = function () {
            var a = this.createRange(this.$editable);
            a.isCollapsed() && a.isOnCell() && (this.beforeCommand(), this.table.deleteRow(a),
                this.afterCommand());
        }, b.prototype.deleteCol = function () {
            var a = this.createRange(this.$editable);
            a.isCollapsed() && a.isOnCell() && (this.beforeCommand(), this.table.deleteCol(a),
                this.afterCommand());
        }, b.prototype.deleteTable = function () {
            var a = this.createRange(this.$editable);
            a.isCollapsed() && a.isOnCell() && (this.beforeCommand(), this.table.deleteTable(a),
                this.afterCommand());
        }, b.prototype.resizeTo = function (a, b, c) {
            var d;
            if (c) {
                var e = a.y / a.x, f = b.data("ratio");
                d = {
                    width: e < f ? a.x : a.y / f,
                    height: e < f ? a.x * f : a.y
                };
            } else d = {
                width: a.x,
                height: a.y
            };
            b.css(d);
        }, b.prototype.hasFocus = function () {
            return this.$editable.is(":focus");
        }, b.prototype.focus = function () {
            this.hasFocus() || this.$editable.focus();
        }, b.prototype.isEmpty = function () {
            return Cb.isEmpty(this.$editable[0]) || Cb.emptyPara === this.$editable.html();
        }, b.prototype.empty = function () {
            this.context.invoke("code", Cb.emptyPara);
        }, b.prototype.normalizeContent = function () {
            this.$editable[0].normalize();
        }, b;
    }(), Rb = function () {
        function a(a) {
            this.context = a, this.$editable = a.layoutInfo.editable;
        }
        return a.prototype.initialize = function () {
            this.$editable.on("paste", this.pasteByEvent.bind(this));
        }, a.prototype.pasteByEvent = function (a) {
            var b = a.originalEvent.clipboardData;
            if (b && b.items && b.items.length) {
                var c = 1 < b.items.length ? b.items[1] : B.head(b.items);
                "file" === c.kind && -1 !== c.type.indexOf("image/") && this.context.invoke("editor.insertImagesOrCallback", [c.getAsFile()]),
                    this.context.invoke("editor.afterCommand");
            }
        }, a;
    }(), Sb = function () {
        function b(b) {
            this.context = b, this.$eventListener = a(document), this.$editor = b.layoutInfo.editor,
                this.$editable = b.layoutInfo.editable, this.options = b.options, this.lang = this.options.langInfo,
                this.documentEventHandlers = {}, this.$dropzone = a(['<div class="note-dropzone">', '  <div class="note-dropzone-message"/>', "</div>"].join("")).prependTo(this.$editor);
        }
        return b.prototype.initialize = function () {
            this.options.disableDragAndDrop ? (this.documentEventHandlers.onDrop = function (a) {
                a.preventDefault();
            }, this.$eventListener = this.$dropzone, this.$eventListener.on("drop", this.documentEventHandlers.onDrop)) : this.attachDragAndDropEvent();
        }, b.prototype.attachDragAndDropEvent = function () {
            var b = this, c = a(), d = this.$dropzone.find(".note-dropzone-message");
            this.documentEventHandlers.onDragenter = function (a) {
                var e = b.context.invoke("codeview.isActivated"), f = 0 < b.$editor.width() && 0 < b.$editor.height();
                e || c.length || !f || (b.$editor.addClass("dragover"), b.$dropzone.width(b.$editor.width()),
                    b.$dropzone.height(b.$editor.height()), d.text(b.lang.image.dragImageHere)), c = c.add(a.target);
            }, this.documentEventHandlers.onDragleave = function (a) {
                (c = c.not(a.target)).length || b.$editor.removeClass("dragover");
            }, this.documentEventHandlers.onDrop = function () {
                c = a(), b.$editor.removeClass("dragover");
            }, this.$eventListener.on("dragenter", this.documentEventHandlers.onDragenter).on("dragleave", this.documentEventHandlers.onDragleave).on("drop", this.documentEventHandlers.onDrop),
                this.$dropzone.on("dragenter", function () {
                    b.$dropzone.addClass("hover"), d.text(b.lang.image.dropImage);
                }).on("dragleave", function () {
                    b.$dropzone.removeClass("hover"), d.text(b.lang.image.dragImageHere);
                }), this.$dropzone.on("drop", function (c) {
                    var d = c.originalEvent.dataTransfer;
                    c.preventDefault(), d && d.files && d.files.length ? (b.$editable.focus(), b.context.invoke("editor.insertImagesOrCallback", d.files)) : a.each(d.types, function (c, e) {
                        var f = d.getData(e);
                        -1 < e.toLowerCase().indexOf("text") ? b.context.invoke("editor.pasteHTML", f) : a(f).each(function (a, c) {
                            b.context.invoke("editor.insertNode", c);
                        });
                    });
                }).on("dragover", !1);
        }, b.prototype.destroy = function () {
            var a = this;
            Object.keys(this.documentEventHandlers).forEach(function (b) {
                a.$eventListener.off(b.substr(2).toLowerCase(), a.documentEventHandlers[b]);
            }), this.documentEventHandlers = {};
        }, b;
    }();
    L.hasCodeMirror && (L.isSupportAmd ? require(["codemirror"], function (a) {
        Ob = a;
    }) : Ob = window.CodeMirror);
    var Tb = function () {
        function a(a) {
            this.context = a, this.$editor = a.layoutInfo.editor, this.$editable = a.layoutInfo.editable,
                this.$codable = a.layoutInfo.codable, this.options = a.options;
        }
        return a.prototype.sync = function () {
            this.isActivated() && L.hasCodeMirror && this.$codable.data("cmEditor").save();
        }, a.prototype.isActivated = function () {
            return this.$editor.hasClass("codeview");
        }, a.prototype.toggle = function () {
            this.isActivated() ? this.deactivate() : this.activate(), this.context.triggerEvent("codeview.toggled");
        }, a.prototype.activate = function () {
            var a = this;
            if (this.$codable.val(Cb.html(this.$editable, this.options.prettifyHtml)), this.$codable.height(this.$editable.height()),
                this.context.invoke("toolbar.updateCodeview", !0), this.$editor.addClass("codeview"),
                this.$codable.focus(), L.hasCodeMirror) {
                var b = Ob.fromTextArea(this.$codable[0], this.options.codemirror);
                if (this.options.codemirror.tern) {
                    var c = new Ob.TernServer(this.options.codemirror.tern);
                    b.ternServer = c, b.on("cursorActivity", function (a) {
                        c.updateArgHints(a);
                    });
                }
                b.on("blur", function (c) {
                    a.context.triggerEvent("blur.codeview", b.getValue(), c);
                }), b.setSize(null, this.$editable.outerHeight()), this.$codable.data("cmEditor", b);
            } else this.$codable.on("blur", function (b) {
                a.context.triggerEvent("blur.codeview", a.$codable.val(), b);
            });
        }, a.prototype.deactivate = function () {
            if (L.hasCodeMirror) {
                var a = this.$codable.data("cmEditor");
                this.$codable.val(a.getValue()), a.toTextArea();
            }
            var b = Cb.value(this.$codable, this.options.prettifyHtml) || Cb.emptyPara, c = this.$editable.html() !== b;
            this.$editable.html(b), this.$editable.height(this.options.height ? this.$codable.height() : "auto"),
                this.$editor.removeClass("codeview"), c && this.context.triggerEvent("change", this.$editable.html(), this.$editable),
                this.$editable.focus(), this.context.invoke("toolbar.updateCodeview", !1);
        }, a.prototype.destroy = function () {
            this.isActivated() && this.deactivate();
        }, a;
    }(), Ub = function () {
        function b(b) {
            this.$document = a(document), this.$statusbar = b.layoutInfo.statusbar, this.$editable = b.layoutInfo.editable,
                this.options = b.options;
        }
        return b.prototype.initialize = function () {
            var a = this;
            this.options.airMode || this.options.disableResizeEditor ? this.destroy() : this.$statusbar.on("mousedown", function (b) {
                b.preventDefault(), b.stopPropagation();
                var c = a.$editable.offset().top - a.$document.scrollTop(), d = function (b) {
                    var d = b.clientY - (c + 24);
                    d = 0 < a.options.minheight ? Math.max(d, a.options.minheight) : d, d = 0 < a.options.maxHeight ? Math.min(d, a.options.maxHeight) : d,
                        a.$editable.height(d);
                };
                a.$document.on("mousemove", d).one("mouseup", function () {
                    a.$document.off("mousemove", d);
                });
            });
        }, b.prototype.destroy = function () {
            this.$statusbar.off(), this.$statusbar.addClass("locked");
        }, b;
    }(), Vb = function () {
        function b(b) {
            var c = this;
            this.context = b, this.$editor = b.layoutInfo.editor, this.$toolbar = b.layoutInfo.toolbar,
                this.$editable = b.layoutInfo.editable, this.$codable = b.layoutInfo.codable, this.$window = a(window),
                this.$scrollbar = a("html, body"), this.onResize = function () {
                    c.resizeTo({
                        h: c.$window.height() - c.$toolbar.outerHeight()
                    });
                };
        }
        return b.prototype.resizeTo = function (a) {
            this.$editable.css("height", a.h), this.$codable.css("height", a.h), this.$codable.data("cmeditor") && this.$codable.data("cmeditor").setsize(null, a.h);
        }, b.prototype.toggle = function () {
            this.$editor.toggleClass("fullscreen"), this.isFullscreen() ? (this.$editable.data("orgHeight", this.$editable.css("height")),
                this.$editable.data("orgMaxHeight", this.$editable.css("maxHeight")), this.$editable.css("maxHeight", ""),
                this.$window.on("resize", this.onResize).trigger("resize"), this.$scrollbar.css("overflow", "hidden")) : (this.$window.off("resize", this.onResize),
                    this.resizeTo({
                        h: this.$editable.data("orgHeight")
                    }), this.$editable.css("maxHeight", this.$editable.css("orgMaxHeight")), this.$scrollbar.css("overflow", "visible")),
                this.context.invoke("toolbar.updateFullscreen", this.isFullscreen());
        }, b.prototype.isFullscreen = function () {
            return this.$editor.hasClass("fullscreen");
        }, b;
    }(), Wb = function () {
        function b(b) {
            var c = this;
            this.context = b, this.$document = a(document), this.$editingArea = b.layoutInfo.editingArea,
                this.options = b.options, this.lang = this.options.langInfo, this.events = {
                    "summernote.mousedown": function (a, b) {
                        c.update(b.target) && b.preventDefault();
                    },
                    "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown": function () {
                        c.update();
                    },
                    "summernote.disable": function () {
                        c.hide();
                    },
                    "summernote.codeview.toggled": function () {
                        c.update();
                    }
                };
        }
        return b.prototype.initialize = function () {
            var b = this;
            this.$handle = a(['<div class="note-handle">', '<div class="note-control-selection">', '<div class="note-control-selection-bg"></div>', '<div class="note-control-holder note-control-nw"></div>', '<div class="note-control-holder note-control-ne"></div>', '<div class="note-control-holder note-control-sw"></div>', '<div class="', this.options.disableResizeImage ? "note-control-holder" : "note-control-sizing", ' note-control-se"></div>', this.options.disableResizeImage ? "" : '<div class="note-control-selection-info"></div>', "</div>", "</div>"].join("")).prependTo(this.$editingArea),
                this.$handle.on("mousedown", function (a) {
                    if (Cb.isControlSizing(a.target)) {
                        a.preventDefault(), a.stopPropagation();
                        var c = b.$handle.find(".note-control-selection").data("target"), d = c.offset(), e = b.$document.scrollTop(), f = function (a) {
                            b.context.invoke("editor.resizeTo", {
                                x: a.clientX - d.left,
                                y: a.clientY - (d.top - e)
                            }, c, !a.shiftKey), b.update(c[0]);
                        };
                        b.$document.on("mousemove", f).one("mouseup", function (a) {
                            a.preventDefault(), b.$document.off("mousemove", f), b.context.invoke("editor.afterCommand");
                        }), c.data("ratio") || c.data("ratio", c.height() / c.width());
                    }
                }), this.$handle.on("wheel", function (a) {
                    a.preventDefault(), b.update();
                });
        }, b.prototype.destroy = function () {
            this.$handle.remove();
        }, b.prototype.update = function (b) {
            if (this.context.isDisabled()) return !1;
            var c = Cb.isImg(b), d = this.$handle.find(".note-control-selection");
            if (this.context.invoke("imagePopover.update", b), c) {
                var e = a(b), f = e.position(), g = {
                    left: f.left + parseInt(e.css("marginLeft"), 10),
                    top: f.top + parseInt(e.css("marginTop"), 10)
                }, h = {
                    w: e.outerWidth(!1),
                    h: e.outerHeight(!1)
                };
                d.css({
                    display: "block",
                    left: g.left,
                    top: g.top,
                    width: h.w,
                    height: h.h
                }).data("target", e);
                var i = new Image();
                i.src = e.attr("src");
                var j = h.w + "x" + h.h + " (" + this.lang.image.original + ": " + i.width + "x" + i.height + ")";
                d.find(".note-control-selection-info").text(j), this.context.invoke("editor.saveTarget", b);
            } else this.hide();
            return c;
        }, b.prototype.hide = function () {
            this.context.invoke("editor.clearTarget"), this.$handle.children().hide();
        }, b;
    }(), Xb = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i, Yb = function () {
        function b(a) {
            var b = this;
            this.context = a, this.events = {
                "summernote.keyup": function (a, c) {
                    c.isDefaultPrevented() || b.handleKeyup(c);
                },
                "summernote.keydown": function (a, c) {
                    b.handleKeydown(c);
                }
            };
        }
        return b.prototype.initialize = function () {
            this.lastWordRange = null;
        }, b.prototype.destroy = function () {
            this.lastWordRange = null;
        }, b.prototype.replace = function () {
            if (this.lastWordRange) {
                var b = this.lastWordRange.toString(), c = b.match(Xb);
                if (c && (c[1] || c[2])) {
                    var d = c[1] ? b : "http://" + b, e = a("<a />").html(b).attr("href", d)[0];
                    this.context.options.linkTargetBlank && a(e).attr("target", "_blank"), this.lastWordRange.insertNode(e),
                        this.lastWordRange = null, this.context.invoke("editor.focus");
                }
            }
        }, b.prototype.handleKeydown = function (a) {
            if (B.contains([Ib.code.ENTER, Ib.code.SPACE], a.keyCode)) {
                var b = this.context.invoke("editor.createRange").getWordRange();
                this.lastWordRange = b;
            }
        }, b.prototype.handleKeyup = function (a) {
            B.contains([Ib.code.ENTER, Ib.code.SPACE], a.keyCode) && this.replace();
        }, b;
    }(), Zb = function () {
        function a(a) {
            var b = this;
            this.$note = a.layoutInfo.note, this.events = {
                "summernote.change": function () {
                    b.$note.val(a.invoke("code"));
                }
            };
        }
        return a.prototype.shouldInitialize = function () {
            return Cb.isTextarea(this.$note[0]);
        }, a;
    }(), $b = function () {
        function b(a) {
            var b = this;
            this.context = a, this.$editingArea = a.layoutInfo.editingArea, this.options = a.options,
                this.events = {
                    "summernote.init summernote.change": function () {
                        b.update();
                    },
                    "summernote.codeview.toggled": function () {
                        b.update();
                    }
                };
        }
        return b.prototype.shouldInitialize = function () {
            return !!this.options.placeholder;
        }, b.prototype.initialize = function () {
            var b = this;
            this.$placeholder = a('<div class="note-placeholder">'), this.$placeholder.on("click", function () {
                b.context.invoke("focus");
            }).html(this.options.placeholder).prependTo(this.$editingArea), this.update();
        }, b.prototype.destroy = function () {
            this.$placeholder.remove();
        }, b.prototype.update = function () {
            var a = !this.context.invoke("codeview.isActivated") && this.context.invoke("editor.isEmpty");
            this.$placeholder.toggle(a);
        }, b;
    }(), _b = function () {
        function b(b) {
            this.ui = a.summernote.ui, this.context = b, this.$toolbar = b.layoutInfo.toolbar,
                this.options = b.options, this.lang = this.options.langInfo, this.invertedKeyMap = v.invertObject(this.options.keyMap[L.isMac ? "mac" : "pc"]);
        }
        return b.prototype.representShortcut = function (a) {
            var b = this.invertedKeyMap[a];
            return this.options.shortcuts && b ? (L.isMac && (b = b.replace("CMD", "⌘").replace("SHIFT", "⇧")),
                " (" + (b = b.replace("BACKSLASH", "\\").replace("SLASH", "/").replace("LEFTBRACKET", "[").replace("RIGHTBRACKET", "]")) + ")") : "";
        }, b.prototype.button = function (a) {
            return !this.options.tooltip && a.tooltip && delete a.tooltip, a.container = this.options.container,
                this.ui.button(a);
        }, b.prototype.initialize = function () {
            this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(),
                this.addTablePopoverButtons(), this.fontInstalledMap = {};
        }, b.prototype.destroy = function () {
            delete this.fontInstalledMap;
        }, b.prototype.isFontInstalled = function (a) {
            return this.fontInstalledMap.hasOwnProperty(a) || (this.fontInstalledMap[a] = L.isFontInstalled(a) || B.contains(this.options.fontNamesIgnoreCheck, a)),
                this.fontInstalledMap[a];
        }, b.prototype.isFontDeservedToAdd = function (b) {
            return "" !== (b = b.toLowerCase()) && this.isFontInstalled(b) && -1 === a.inArray(b, ["sans-serif", "serif", "monospace", "cursive", "fantasy"]);
        }, b.prototype.colorPalette = function (b, c, d, e) {
            var f = this;
            return this.ui.buttonGroup({
                className: "note-color " + b,
                children: [this.button({
                    className: "note-current-color-button",
                    contents: this.ui.icon(this.options.icons.font + " note-recent-color"),
                    tooltip: c,
                    click: function (b) {
                        var c = a(b.currentTarget);
                        d && e ? f.context.invoke("editor.color", {
                            backColor: c.attr("data-backColor"),
                            foreColor: c.attr("data-foreColor")
                        }) : d ? f.context.invoke("editor.color", {
                            backColor: c.attr("data-backColor")
                        }) : e && f.context.invoke("editor.color", {
                            foreColor: c.attr("data-foreColor")
                        });
                    },
                    callback: function (a) {
                        var b = a.find(".note-recent-color");
                        d && (b.css("background-color", "#FFFFFF"), a.attr("data-backColor", "#FFFFFF")),
                            e || b.css("color", "transparent");
                    }
                }), this.button({
                    className: "dropdown-toggle",
                    contents: this.ui.dropdownButtonContents("", this.options),
                    tooltip: this.lang.color.more,
                    data: {
                        toggle: "dropdown"
                    }
                }), this.ui.dropdown({
                    items: (d ? ['<div class="note-palette">', '  <div class="note-palette-title">' + this.lang.color.background + "</div>", "  <div>", '    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">', this.lang.color.transparent, "    </button>", "  </div>", '  <div class="note-holder" data-event="backColor"/>', "  <div>", '    <button type="button" class="note-color-select btn" data-event="openPalette" data-value="backColorPicker">', this.lang.color.cpSelect, "    </button>", '    <input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="#FFFF00" data-event="backColorPalette">', "  </div>", '  <div class="note-holder-custom" id="backColorPalette" data-event="backColor"/>', "</div>"].join("") : "") + (e ? ['<div class="note-palette">', '  <div class="note-palette-title">' + this.lang.color.foreground + "</div>", "  <div>", '    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">', this.lang.color.resetToDefault, "    </button>", "  </div>", '  <div class="note-holder" data-event="foreColor"/>', "  <div>", '    <button type="button" class="note-color-select btn" data-event="openPalette" data-value="foreColorPicker">', this.lang.color.cpSelect, "    </button>", '    <input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="#000000" data-event="foreColorPalette">', '  <div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"/>', "</div>"].join("") : ""),
                    callback: function (b) {
                        b.find(".note-holder").each(function (b, c) {
                            var d = a(c);
                            d.append(f.ui.palette({
                                colors: f.options.colors,
                                colorsName: f.options.colorsName,
                                eventName: d.data("event"),
                                container: f.options.container,
                                tooltip: f.options.tooltip
                            }).render());
                        });
                        var c = [["#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]];
                        b.find(".note-holder-custom").each(function (b, d) {
                            var e = a(d);
                            e.append(f.ui.palette({
                                colors: c,
                                colorsName: c,
                                eventName: e.data("event"),
                                container: f.options.container,
                                tooltip: f.options.tooltip
                            }).render());
                        }), b.find("input[type=color]").each(function (c, d) {
                            a(d).change(function () {
                                var c = b.find("#" + a(this).data("event")).find(".note-color-btn").first(), d = this.value.toUpperCase();
                                c.css("background-color", d).attr("aria-label", d).attr("data-value", d).attr("data-original-title", d),
                                    c.click();
                            });
                        });
                    },
                    click: function (c) {
                        c.stopPropagation();
                        var d = a("." + b), e = a(c.target), g = e.data("event"), h = e.attr("data-value");
                        if ("openPalette" === g) {
                            var i = d.find("#" + h), j = a(d.find("#" + i.data("event")).find(".note-color-row")[0]), k = j.find(".note-color-btn").last().detach(), l = i.val();
                            k.css("background-color", l).attr("aria-label", l).attr("data-value", l).attr("data-original-title", l),
                                j.prepend(k), i.click();
                        } else if (B.contains(["backColor", "foreColor"], g)) {
                            var m = "backColor" === g ? "background-color" : "color", n = e.closest(".note-color").find(".note-recent-color"), o = e.closest(".note-color").find(".note-current-color-button");
                            n.css(m, h), o.attr("data-" + g, h), f.context.invoke("editor." + g, h);
                        }
                    }
                })]
            }).render();
        }, b.prototype.addToolbarButtons = function () {
            var b = this;
            this.context.memo("button.style", function () {
                return b.ui.buttonGroup([b.button({
                    className: "dropdown-toggle",
                    contents: b.ui.dropdownButtonContents(b.ui.icon(b.options.icons.magic), b.options),
                    tooltip: b.lang.style.style,
                    data: {
                        toggle: "dropdown"
                    }
                }), b.ui.dropdown({
                    className: "dropdown-style",
                    items: b.options.styleTags,
                    title: b.lang.style.style,
                    template: function (a) {
                        "string" == typeof a && (a = {
                            tag: a,
                            title: b.lang.style.hasOwnProperty(a) ? b.lang.style[a] : a
                        });
                        var c = a.tag, d = a.title;
                        return "<" + c + (a.style ? ' style="' + a.style + '" ' : "") + (a.className ? ' class="' + a.className + '"' : "") + ">" + d + "</" + c + ">";
                    },
                    click: b.context.createInvokeHandler("editor.formatBlock")
                })]).render();
            });
            for (var c = function (a, c) {
                var e = d.options.styleTags[a];
                d.context.memo("button.style." + e, function () {
                    return b.button({
                        className: "note-btn-style-" + e,
                        contents: '<div data-value="' + e + '">' + e.toUpperCase() + "</div>",
                        tooltip: b.lang.style[e],
                        click: b.context.createInvokeHandler("editor.formatBlock")
                    }).render();
                });
            }, d = this, e = 0, f = this.options.styleTags.length; e < f; e++) c(e);
            this.context.memo("button.bold", function () {
                return b.button({
                    className: "note-btn-bold",
                    contents: b.ui.icon(b.options.icons.bold),
                    tooltip: b.lang.font.bold + b.representShortcut("bold"),
                    click: b.context.createInvokeHandlerAndUpdateState("editor.bold")
                }).render();
            }), this.context.memo("button.italic", function () {
                return b.button({
                    className: "note-btn-italic",
                    contents: b.ui.icon(b.options.icons.italic),
                    tooltip: b.lang.font.italic + b.representShortcut("italic"),
                    click: b.context.createInvokeHandlerAndUpdateState("editor.italic")
                }).render();
            }), this.context.memo("button.underline", function () {
                return b.button({
                    className: "note-btn-underline",
                    contents: b.ui.icon(b.options.icons.underline),
                    tooltip: b.lang.font.underline + b.representShortcut("underline"),
                    click: b.context.createInvokeHandlerAndUpdateState("editor.underline")
                }).render();
            }), this.context.memo("button.clear", function () {
                return b.button({
                    contents: b.ui.icon(b.options.icons.eraser),
                    tooltip: b.lang.font.clear + b.representShortcut("removeFormat"),
                    click: b.context.createInvokeHandler("editor.removeFormat")
                }).render();
            }), this.context.memo("button.strikethrough", function () {
                return b.button({
                    className: "note-btn-strikethrough",
                    contents: b.ui.icon(b.options.icons.strikethrough),
                    tooltip: b.lang.font.strikethrough + b.representShortcut("strikethrough"),
                    click: b.context.createInvokeHandlerAndUpdateState("editor.strikethrough")
                }).render();
            }), this.context.memo("button.superscript", function () {
                return b.button({
                    className: "note-btn-superscript",
                    contents: b.ui.icon(b.options.icons.superscript),
                    tooltip: b.lang.font.superscript,
                    click: b.context.createInvokeHandlerAndUpdateState("editor.superscript")
                }).render();
            }), this.context.memo("button.subscript", function () {
                return b.button({
                    className: "note-btn-subscript",
                    contents: b.ui.icon(b.options.icons.subscript),
                    tooltip: b.lang.font.subscript,
                    click: b.context.createInvokeHandlerAndUpdateState("editor.subscript")
                }).render();
            }), this.context.memo("button.fontname", function () {
                var c = b.context.invoke("editor.currentStyle");
                return a.each(c["font-family"].split(","), function (c, d) {
                    d = d.trim().replace(/['"]+/g, ""), b.isFontDeservedToAdd(d) && -1 === a.inArray(d, b.options.fontNames) && b.options.fontNames.push(d);
                }), b.ui.buttonGroup([b.button({
                    className: "dropdown-toggle",
                    contents: b.ui.dropdownButtonContents('<span class="note-current-fontname"/>', b.options),
                    tooltip: b.lang.font.name,
                    data: {
                        toggle: "dropdown"
                    }
                }), b.ui.dropdownCheck({
                    className: "dropdown-fontname",
                    checkClassName: b.options.icons.menuCheck,
                    items: b.options.fontNames.filter(b.isFontInstalled.bind(b)),
                    title: b.lang.font.name,
                    template: function (a) {
                        return "<span style=\"font-family: '" + a + "'\">" + a + "</span>";
                    },
                    click: b.context.createInvokeHandlerAndUpdateState("editor.fontName")
                })]).render();
            }), this.context.memo("button.fontsize", function () {
                return b.ui.buttonGroup([b.button({
                    className: "dropdown-toggle",
                    contents: b.ui.dropdownButtonContents('<span class="note-current-fontsize"/>', b.options),
                    tooltip: b.lang.font.size,
                    data: {
                        toggle: "dropdown"
                    }
                }), b.ui.dropdownCheck({
                    className: "dropdown-fontsize",
                    checkClassName: b.options.icons.menuCheck,
                    items: b.options.fontSizes,
                    title: b.lang.font.size,
                    click: b.context.createInvokeHandlerAndUpdateState("editor.fontSize")
                })]).render();
            }), this.context.memo("button.color", function () {
                return b.colorPalette("note-color-all", b.lang.color.recent, !0, !0);
            }), this.context.memo("button.forecolor", function () {
                return b.colorPalette("note-color-fore", b.lang.color.foreground, !1, !0);
            }), this.context.memo("button.backcolor", function () {
                return b.colorPalette("note-color-back", b.lang.color.background, !0, !1);
            }), this.context.memo("button.ul", function () {
                return b.button({
                    contents: b.ui.icon(b.options.icons.unorderedlist),
                    tooltip: b.lang.lists.unordered + b.representShortcut("insertUnorderedList"),
                    click: b.context.createInvokeHandler("editor.insertUnorderedList")
                }).render();
            }), this.context.memo("button.ol", function () {
                return b.button({
                    contents: b.ui.icon(b.options.icons.orderedlist),
                    tooltip: b.lang.lists.ordered + b.representShortcut("insertOrderedList"),
                    click: b.context.createInvokeHandler("editor.insertOrderedList")
                }).render();
            });
            var g = this.button({
                contents: this.ui.icon(this.options.icons.alignLeft),
                tooltip: this.lang.paragraph.left + this.representShortcut("justifyLeft"),
                click: this.context.createInvokeHandler("editor.justifyLeft")
            }), h = this.button({
                contents: this.ui.icon(this.options.icons.alignCenter),
                tooltip: this.lang.paragraph.center + this.representShortcut("justifyCenter"),
                click: this.context.createInvokeHandler("editor.justifyCenter")
            }), i = this.button({
                contents: this.ui.icon(this.options.icons.alignRight),
                tooltip: this.lang.paragraph.right + this.representShortcut("justifyRight"),
                click: this.context.createInvokeHandler("editor.justifyRight")
            }), j = this.button({
                contents: this.ui.icon(this.options.icons.alignJustify),
                tooltip: this.lang.paragraph.justify + this.representShortcut("justifyFull"),
                click: this.context.createInvokeHandler("editor.justifyFull")
            }), k = this.button({
                contents: this.ui.icon(this.options.icons.outdent),
                tooltip: this.lang.paragraph.outdent + this.representShortcut("outdent"),
                click: this.context.createInvokeHandler("editor.outdent")
            }), l = this.button({
                contents: this.ui.icon(this.options.icons.indent),
                tooltip: this.lang.paragraph.indent + this.representShortcut("indent"),
                click: this.context.createInvokeHandler("editor.indent")
            });
            this.context.memo("button.justifyLeft", v.invoke(g, "render")), this.context.memo("button.justifyCenter", v.invoke(h, "render")),
                this.context.memo("button.justifyRight", v.invoke(i, "render")), this.context.memo("button.justifyFull", v.invoke(j, "render")),
                this.context.memo("button.outdent", v.invoke(k, "render")), this.context.memo("button.indent", v.invoke(l, "render")),
                this.context.memo("button.paragraph", function () {
                    return b.ui.buttonGroup([b.button({
                        className: "dropdown-toggle",
                        contents: b.ui.dropdownButtonContents(b.ui.icon(b.options.icons.alignLeft), b.options),
                        tooltip: b.lang.paragraph.paragraph,
                        data: {
                            toggle: "dropdown"
                        }
                    }), b.ui.dropdown([b.ui.buttonGroup({
                        className: "note-align",
                        children: [g, h, i, j]
                    }), b.ui.buttonGroup({
                        className: "note-list",
                        children: [k, l]
                    })])]).render();
                }), this.context.memo("button.height", function () {
                    return b.ui.buttonGroup([b.button({
                        className: "dropdown-toggle",
                        contents: b.ui.dropdownButtonContents(b.ui.icon(b.options.icons.textHeight), b.options),
                        tooltip: b.lang.font.height,
                        data: {
                            toggle: "dropdown"
                        }
                    }), b.ui.dropdownCheck({
                        items: b.options.lineHeights,
                        checkClassName: b.options.icons.menuCheck,
                        className: "dropdown-line-height",
                        title: b.lang.font.height,
                        click: b.context.createInvokeHandler("editor.lineHeight")
                    })]).render();
                }), this.context.memo("button.table", function () {
                    return b.ui.buttonGroup([b.button({
                        className: "dropdown-toggle",
                        contents: b.ui.dropdownButtonContents(b.ui.icon(b.options.icons.table), b.options),
                        tooltip: b.lang.table.table,
                        data: {
                            toggle: "dropdown"
                        }
                    }), b.ui.dropdown({
                        title: b.lang.table.table,
                        className: "note-table",
                        items: ['<div class="note-dimension-picker">', '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '  <div class="note-dimension-picker-highlighted"/>', '  <div class="note-dimension-picker-unhighlighted"/>', "</div>", '<div class="note-dimension-display">1 x 1</div>'].join("")
                    })], {
                            callback: function (a) {
                                a.find(".note-dimension-picker-mousecatcher").css({
                                    width: b.options.insertTableMaxSize.col + "em",
                                    height: b.options.insertTableMaxSize.row + "em"
                                }).mousedown(b.context.createInvokeHandler("editor.insertTable")).on("mousemove", b.tableMoveHandler.bind(b));
                            }
                        }).render();
                }), this.context.memo("button.link", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.link),
                        tooltip: b.lang.link.link + b.representShortcut("linkDialog.show"),
                        click: b.context.createInvokeHandler("linkDialog.show")
                    }).render();
                }), this.context.memo("button.picture", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.picture),
                        tooltip: b.lang.image.image,
                        click: b.context.createInvokeHandler("imageDialog.show")
                    }).render();
                }), this.context.memo("button.video", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.video),
                        tooltip: b.lang.video.video,
                        click: b.context.createInvokeHandler("videoDialog.show")
                    }).render();
                }), this.context.memo("button.hr", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.minus),
                        tooltip: b.lang.hr.insert + b.representShortcut("insertHorizontalRule"),
                        click: b.context.createInvokeHandler("editor.insertHorizontalRule")
                    }).render();
                }), this.context.memo("button.fullscreen", function () {
                    return b.button({
                        className: "btn-fullscreen",
                        contents: b.ui.icon(b.options.icons.arrowsAlt),
                        tooltip: b.lang.options.fullscreen,
                        click: b.context.createInvokeHandler("fullscreen.toggle")
                    }).render();
                }), this.context.memo("button.codeview", function () {
                    return b.button({
                        className: "btn-codeview",
                        contents: b.ui.icon(b.options.icons.code),
                        tooltip: b.lang.options.codeview,
                        click: b.context.createInvokeHandler("codeview.toggle")
                    }).render();
                }), this.context.memo("button.redo", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.redo),
                        tooltip: b.lang.history.redo + b.representShortcut("redo"),
                        click: b.context.createInvokeHandler("editor.redo")
                    }).render();
                }), this.context.memo("button.undo", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.undo),
                        tooltip: b.lang.history.undo + b.representShortcut("undo"),
                        click: b.context.createInvokeHandler("editor.undo")
                    }).render();
                }), this.context.memo("button.help", function () {
                    return b.button({
                        contents: b.ui.icon(b.options.icons.question),
                        tooltip: b.lang.options.help,
                        click: b.context.createInvokeHandler("helpDialog.show")
                    }).render();
                });
        }, b.prototype.addImagePopoverButtons = function () {
            var a = this;
            this.context.memo("button.imageSize100", function () {
                return a.button({
                    contents: '<span class="note-fontsize-10">100%</span>',
                    tooltip: a.lang.image.resizeFull,
                    click: a.context.createInvokeHandler("editor.resize", "1")
                }).render();
            }), this.context.memo("button.imageSize50", function () {
                return a.button({
                    contents: '<span class="note-fontsize-10">50%</span>',
                    tooltip: a.lang.image.resizeHalf,
                    click: a.context.createInvokeHandler("editor.resize", "0.5")
                }).render();
            }), this.context.memo("button.imageSize25", function () {
                return a.button({
                    contents: '<span class="note-fontsize-10">25%</span>',
                    tooltip: a.lang.image.resizeQuarter,
                    click: a.context.createInvokeHandler("editor.resize", "0.25")
                }).render();
            }), this.context.memo("button.floatLeft", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.alignLeft),
                    tooltip: a.lang.image.floatLeft,
                    click: a.context.createInvokeHandler("editor.floatMe", "left")
                }).render();
            }), this.context.memo("button.floatRight", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.alignRight),
                    tooltip: a.lang.image.floatRight,
                    click: a.context.createInvokeHandler("editor.floatMe", "right")
                }).render();
            }), this.context.memo("button.floatNone", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.alignJustify),
                    tooltip: a.lang.image.floatNone,
                    click: a.context.createInvokeHandler("editor.floatMe", "none")
                }).render();
            }), this.context.memo("button.removeMedia", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.trash),
                    tooltip: a.lang.image.remove,
                    click: a.context.createInvokeHandler("editor.removeMedia")
                }).render();
            });
        }, b.prototype.addLinkPopoverButtons = function () {
            var a = this;
            this.context.memo("button.linkDialogShow", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.link),
                    tooltip: a.lang.link.edit,
                    click: a.context.createInvokeHandler("linkDialog.show")
                }).render();
            }), this.context.memo("button.unlink", function () {
                return a.button({
                    contents: a.ui.icon(a.options.icons.unlink),
                    tooltip: a.lang.link.unlink,
                    click: a.context.createInvokeHandler("editor.unlink")
                }).render();
            });
        }, b.prototype.addTablePopoverButtons = function () {
            var a = this;
            this.context.memo("button.addRowUp", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.rowAbove),
                    tooltip: a.lang.table.addRowAbove,
                    click: a.context.createInvokeHandler("editor.addRow", "top")
                }).render();
            }), this.context.memo("button.addRowDown", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.rowBelow),
                    tooltip: a.lang.table.addRowBelow,
                    click: a.context.createInvokeHandler("editor.addRow", "bottom")
                }).render();
            }), this.context.memo("button.addColLeft", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.colBefore),
                    tooltip: a.lang.table.addColLeft,
                    click: a.context.createInvokeHandler("editor.addCol", "left")
                }).render();
            }), this.context.memo("button.addColRight", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.colAfter),
                    tooltip: a.lang.table.addColRight,
                    click: a.context.createInvokeHandler("editor.addCol", "right")
                }).render();
            }), this.context.memo("button.deleteRow", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.rowRemove),
                    tooltip: a.lang.table.delRow,
                    click: a.context.createInvokeHandler("editor.deleteRow")
                }).render();
            }), this.context.memo("button.deleteCol", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.colRemove),
                    tooltip: a.lang.table.delCol,
                    click: a.context.createInvokeHandler("editor.deleteCol")
                }).render();
            }), this.context.memo("button.deleteTable", function () {
                return a.button({
                    className: "btn-md",
                    contents: a.ui.icon(a.options.icons.trash),
                    tooltip: a.lang.table.delTable,
                    click: a.context.createInvokeHandler("editor.deleteTable")
                }).render();
            });
        }, b.prototype.build = function (b, c) {
            for (var d = 0, e = c.length; d < e; d++) {
                for (var f = c[d], g = a.isArray(f) ? f[0] : f, h = a.isArray(f) ? 1 === f.length ? [f[0]] : f[1] : [f], i = this.ui.buttonGroup({
                    className: "note-" + g
                }).render(), j = 0, k = h.length; j < k; j++) {
                    var l = this.context.memo("button." + h[j]);
                    l && i.append("function" == typeof l ? l(this.context) : l);
                }
                i.appendTo(b);
            }
        }, b.prototype.updateCurrentStyle = function (b) {
            var c = this, d = b || this.$toolbar, e = this.context.invoke("editor.currentStyle");
            if (this.updateBtnStates(d, {
                ".note-btn-bold": function () {
                    return "bold" === e["font-bold"];
                },
                ".note-btn-italic": function () {
                    return "italic" === e["font-italic"];
                },
                ".note-btn-underline": function () {
                    return "underline" === e["font-underline"];
                },
                ".note-btn-subscript": function () {
                    return "subscript" === e["font-subscript"];
                },
                ".note-btn-superscript": function () {
                    return "superscript" === e["font-superscript"];
                },
                ".note-btn-strikethrough": function () {
                    return "strikethrough" === e["font-strikethrough"];
                }
            }), e["font-family"]) {
                var f = e["font-family"].split(",").map(function (a) {
                    return a.replace(/[\'\"]/g, "").replace(/\s+$/, "").replace(/^\s+/, "");
                }), g = B.find(f, this.isFontInstalled.bind(this));
                d.find(".dropdown-fontname a").each(function (b, c) {
                    var d = a(c), e = d.data("value") + "" == g + "";
                    d.toggleClass("checked", e);
                }), d.find(".note-current-fontname").text(g).css("font-family", g);
            }
            if (e["font-size"]) {
                var h = e["font-size"];
                d.find(".dropdown-fontsize a").each(function (b, c) {
                    var d = a(c), e = d.data("value") + "" == h + "";
                    d.toggleClass("checked", e);
                }), d.find(".note-current-fontsize").text(h);
            }
            if (e["line-height"]) {
                var i = e["line-height"];
                d.find(".dropdown-line-height li a").each(function (b, d) {
                    var e = a(d).data("value") + "" == i + "";
                    c.className = e ? "checked" : "";
                });
            }
        }, b.prototype.updateBtnStates = function (b, c) {
            var d = this;
            a.each(c, function (a, c) {
                d.ui.toggleBtnActive(b.find(a), c());
            });
        }, b.prototype.tableMoveHandler = function (b) {
            var c, d = a(b.target.parentNode), e = d.next(), f = d.find(".note-dimension-picker-mousecatcher"), g = d.find(".note-dimension-picker-highlighted"), h = d.find(".note-dimension-picker-unhighlighted");
            if (void 0 === b.offsetX) {
                var i = a(b.target).offset();
                c = {
                    x: b.pageX - i.left,
                    y: b.pageY - i.top
                };
            } else c = {
                x: b.offsetX,
                y: b.offsetY
            };
            var j = Math.ceil(c.x / 18) || 1, k = Math.ceil(c.y / 18) || 1;
            g.css({
                width: j + "em",
                height: k + "em"
            }), f.data("value", j + "x" + k), 3 < j && j < this.options.insertTableMaxSize.col && h.css({
                width: j + 1 + "em"
            }), 3 < k && k < this.options.insertTableMaxSize.row && h.css({
                height: k + 1 + "em"
            }), e.html(j + " x " + k);
        }, b;
    }(), ac = function () {
        function b(b) {
            this.context = b, this.$window = a(window), this.$document = a(document), this.ui = a.summernote.ui,
                this.$note = b.layoutInfo.note, this.$editor = b.layoutInfo.editor, this.$toolbar = b.layoutInfo.toolbar,
                this.options = b.options, this.followScroll = this.followScroll.bind(this);
        }
        return b.prototype.shouldInitialize = function () {
            return !this.options.airMode;
        }, b.prototype.initialize = function () {
            var a = this;
            this.options.toolbar = this.options.toolbar || [], this.options.toolbar.length ? this.context.invoke("buttons.build", this.$toolbar, this.options.toolbar) : this.$toolbar.hide(),
                this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer),
                this.changeContainer(!1), this.$note.on("summernote.keyup summernote.mouseup summernote.change", function () {
                    a.context.invoke("buttons.updateCurrentStyle");
                }), this.context.invoke("buttons.updateCurrentStyle"), this.options.followingToolbar && this.$window.on("scroll resize", this.followScroll);
        }, b.prototype.destroy = function () {
            this.$toolbar.children().remove(), this.options.followingToolbar && this.$window.off("scroll resize", this.followScroll);
        }, b.prototype.followScroll = function () {
            if (this.$editor.hasClass("fullscreen")) return !1;
            var b = this.$toolbar.parent(".note-toolbar-wrapper"), c = this.$editor.outerHeight(), d = this.$editor.width(), e = this.$toolbar.height();
            b.css({
                height: e
            });
            var f = 0;
            this.options.otherStaticBar && (f = a(this.options.otherStaticBar).outerHeight());
            var g = this.$document.scrollTop(), h = this.$editor.offset().top;
            h - f < g && g < h + c - f - e ? this.$toolbar.css({
                //position: "fixed",
                top: f,
                width: d
            }) : this.$toolbar.css({
                position: "relative",
                top: 0,
                width: "100%"
            });
        }, b.prototype.changeContainer = function (a) {
            a ? this.$toolbar.prependTo(this.$editor) : this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer);
        }, b.prototype.updateFullscreen = function (a) {
            this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"), a), this.changeContainer(a);
        }, b.prototype.updateCodeview = function (a) {
            this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"), a), a ? this.deactivate() : this.activate();
        }, b.prototype.activate = function (a) {
            var b = this.$toolbar.find("button");
            a || (b = b.not(".btn-codeview")), this.ui.toggleBtn(b, !0);
        }, b.prototype.deactivate = function (a) {
            var b = this.$toolbar.find("button");
            a || (b = b.not(".btn-codeview")), this.ui.toggleBtn(b, !1);
        }, b;
    }(), bc = function () {
        function b(b) {
            this.context = b, this.ui = a.summernote.ui, this.$body = a(document.body), this.$editor = b.layoutInfo.editor,
                this.options = b.options, this.lang = this.options.langInfo, b.memo("help.linkDialog.show", this.options.langInfo.help["linkDialog.show"]);
        }
        return b.prototype.initialize = function () {
            var b = this.options.dialogsInBody ? this.$body : this.$editor, c = ['<div class="form-group note-form-group">', '<label class="note-form-label">' + this.lang.link.textToDisplay + "</label>", '<input class="note-link-text form-control note-form-control note-input" type="text" />', "</div>", '<div class="form-group note-form-group">', '<label class="note-form-label">' + this.lang.link.url + "</label>", '<input class="note-link-url form-control note-form-control note-input" type="text" value="http://" />', "</div>", this.options.disableLinkTarget ? "" : a("<div/>").append(this.ui.checkbox({
                className: "sn-checkbox-open-in-new-window",
                text: this.lang.link.openInNewWindow,
                checked: !0
            }).render()).html()].join(""), d = '<input type="button" href="#" class="btn btn-primary note-btn note-btn-primary note-link-btn" value="' + this.lang.link.insert + '" disabled>';
            this.$dialog = this.ui.dialog({
                className: "link-dialog",
                title: this.lang.link.insert,
                fade: this.options.dialogsFade,
                body: c,
                footer: d
            }).render().appendTo(b);
        }, b.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog), this.$dialog.remove();
        }, b.prototype.bindEnterKey = function (a, b) {
            a.on("keypress", function (a) {
                a.keyCode === Ib.code.ENTER && (a.preventDefault(), b.trigger("click"));
            });
        }, b.prototype.toggleLinkBtn = function (a, b, c) {
            this.ui.toggleBtn(a, b.val() && c.val());
        }, b.prototype.showLinkDialog = function (b) {
            var c = this;
            return a.Deferred(function (a) {
                var d = c.$dialog.find(".note-link-text"), e = c.$dialog.find(".note-link-url"), f = c.$dialog.find(".note-link-btn"), g = c.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]");
                c.ui.onDialogShown(c.$dialog, function () {
                    c.context.triggerEvent("dialog.shown"), b.url || (b.url = b.text), d.val(b.text);
                    var h = function () {
                        c.toggleLinkBtn(f, d, e), b.text = d.val();
                    };
                    d.on("input", h).on("paste", function () {
                        setTimeout(h, 0);
                    });
                    var i = function () {
                        c.toggleLinkBtn(f, d, e), b.text || d.val(e.val());
                    };
                    e.on("input", i).on("paste", function () {
                        setTimeout(i, 0);
                    }).val(b.url), L.isSupportTouch || e.trigger("focus"), c.toggleLinkBtn(f, d, e),
                        c.bindEnterKey(e, f), c.bindEnterKey(d, f);
                    var j = void 0 !== b.isNewWindow ? b.isNewWindow : c.context.options.linkTargetBlank;
                    g.prop("checked", j), f.one("click", function (f) {
                        f.preventDefault(), a.resolve({
                            range: b.range,
                            url: e.val(),
                            text: d.val(),
                            isNewWindow: g.is(":checked")
                        }), c.ui.hideDialog(c.$dialog);
                    });
                }), c.ui.onDialogHidden(c.$dialog, function () {
                    d.off("input paste keypress"), e.off("input paste keypress"), f.off("click"), "pending" === a.state() && a.reject();
                }), c.ui.showDialog(c.$dialog);
            }).promise();
        }, b.prototype.show = function () {
            var a = this, b = this.context.invoke("editor.getLinkInfo");
            this.context.invoke("editor.saveRange"), this.showLinkDialog(b).then(function (b) {
                a.context.invoke("editor.restoreRange"), a.context.invoke("editor.createLink", b);
            }).fail(function () {
                a.context.invoke("editor.restoreRange");
            });
        }, b;
    }(), cc = function () {
        function b(b) {
            var c = this;
            this.context = b, this.ui = a.summernote.ui, this.options = b.options, this.events = {
                "summernote.keyup summernote.mouseup summernote.change summernote.scroll": function () {
                    c.update();
                },
                "summernote.disable summernote.dialog.shown": function () {
                    c.hide();
                }
            };
        }
        return b.prototype.shouldInitialize = function () {
            return !B.isEmpty(this.options.popover.link);
        }, b.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: "note-link-popover",
                callback: function (a) {
                    a.find(".popover-content,.note-popover-content").prepend('<span><a target="_blank"></a>&nbsp;</span>');
                }
            }).render().appendTo(this.options.container);
            var a = this.$popover.find(".popover-content,.note-popover-content");
            this.context.invoke("buttons.build", a, this.options.popover.link);
        }, b.prototype.destroy = function () {
            this.$popover.remove();
        }, b.prototype.update = function () {
            if (this.context.invoke("editor.hasFocus")) {
                var b = this.context.invoke("editor.createRange");
                if (b.isCollapsed() && b.isOnAnchor()) {
                    var c = Cb.ancestor(b.sc, Cb.isAnchor), d = a(c).attr("href");
                    this.$popover.find("a").attr("href", d).html(d);
                    var e = Cb.posFromPlaceholder(c);
                    this.$popover.css({
                        display: "block",
                        left: e.left,
                        top: e.top
                    });
                } else this.hide();
            } else this.hide();
        }, b.prototype.hide = function () {
            this.$popover.hide();
        }, b;
    }(), dc = function () {
        function b(b) {
            this.context = b, this.ui = a.summernote.ui, this.$body = a(document.body), this.$editor = b.layoutInfo.editor,
                this.options = b.options, this.lang = this.options.langInfo;
        }
        return b.prototype.initialize = function () {
            var a = this.options.dialogsInBody ? this.$body : this.$editor, b = "";
            if (this.options.maximumImageFileSize) {
                var c = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024)), d = 1 * (this.options.maximumImageFileSize / Math.pow(1024, c)).toFixed(2) + " " + " KMGTP"[c] + "B";
                b = "<small>" + this.lang.image.maximumFileSize + " : " + d + "</small>";
            }
            var e = ['<div class="form-group note-form-group note-group-select-from-files">', '<label class="note-form-label">' + this.lang.image.selectFromFiles + "</label>", '<input class="note-image-input note-form-control note-input" ', ' type="file" name="files" accept="image/*" multiple="multiple" />', b, "</div>", '<div class="form-group note-group-image-url" style="overflow:auto;">', '<label class="note-form-label">' + this.lang.image.url + "</label>", '<input class="note-image-url form-control note-form-control note-input ', ' col-md-12" type="text" />', "</div>"].join(""), f = '<input type="button" href="#" class="btn btn-primary note-btn note-btn-primary note-image-btn" value="' + this.lang.image.insert + '" disabled>';
            this.$dialog = this.ui.dialog({
                title: this.lang.image.insert,
                fade: this.options.dialogsFade,
                body: e,
                footer: f
            }).render().appendTo(a);
        }, b.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog), this.$dialog.remove();
        }, b.prototype.bindEnterKey = function (a, b) {
            a.on("keypress", function (a) {
                a.keyCode === Ib.code.ENTER && (a.preventDefault(), b.trigger("click"));
            });
        }, b.prototype.show = function () {
            var a = this;
            this.context.invoke("editor.saveRange"), this.showImageDialog().then(function (b) {
                a.ui.hideDialog(a.$dialog), a.context.invoke("editor.restoreRange"), "string" == typeof b ? a.options.callbacks.onImageLinkInsert ? a.context.triggerEvent("image.link.insert", b) : a.context.invoke("editor.insertImage", b) : a.options.callbacks.onImageUpload ? a.context.triggerEvent("image.upload", b) : a.context.invoke("editor.insertImagesAsDataURL", b);
            }).fail(function () {
                a.context.invoke("editor.restoreRange");
            });
        }, b.prototype.showImageDialog = function () {
            var b = this;
            return a.Deferred(function (a) {
                var c = b.$dialog.find(".note-image-input"), d = b.$dialog.find(".note-image-url"), e = b.$dialog.find(".note-image-btn");
                b.ui.onDialogShown(b.$dialog, function () {
                    b.context.triggerEvent("dialog.shown"), c.replaceWith(c.clone().on("change", function (b) {
                        a.resolve(b.target.files || b.target.value);
                    }).val("")), e.click(function (b) {
                        b.preventDefault(), a.resolve(d.val());
                    }), d.on("keyup paste", function () {
                        var a = d.val();
                        b.ui.toggleBtn(e, a);
                    }).val(""), L.isSupportTouch || d.trigger("focus"), b.bindEnterKey(d, e);
                }), b.ui.onDialogHidden(b.$dialog, function () {
                    c.off("change"), d.off("keyup paste keypress"), e.off("click"), "pending" === a.state() && a.reject();
                }), b.ui.showDialog(b.$dialog);
            });
        }, b;
    }(), ec = function () {
        function b(b) {
            var c = this;
            this.context = b, this.ui = a.summernote.ui, this.editable = b.layoutInfo.editable[0],
                this.options = b.options, this.events = {
                    "summernote.disable": function () {
                        c.hide();
                    }
                };
        }
        return b.prototype.shouldInitialize = function () {
            return !B.isEmpty(this.options.popover.image);
        }, b.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: "note-image-popover"
            }).render().appendTo(this.options.container);
            var a = this.$popover.find(".popover-content,.note-popover-content");
            this.context.invoke("buttons.build", a, this.options.popover.image);
        }, b.prototype.destroy = function () {
            this.$popover.remove();
        }, b.prototype.update = function (a) {
            if (Cb.isImg(a)) {
                var b = Cb.posFromPlaceholder(a), c = Cb.posFromPlaceholder(this.editable);
                this.$popover.css({
                    display: "block",
                    left: this.options.popatmouse ? event.pageX - 20 : b.left,
                    top: this.options.popatmouse ? event.pageY : Math.min(b.top, c.top)
                });
            } else this.hide();
        }, b.prototype.hide = function () {
            this.$popover.hide();
        }, b;
    }(), fc = function () {
        function b(b) {
            var c = this;
            this.context = b, this.ui = a.summernote.ui, this.options = b.options, this.events = {
                "summernote.mousedown": function (a, b) {
                    c.update(b.target);
                },
                "summernote.keyup summernote.scroll summernote.change": function () {
                    c.update();
                },
                "summernote.disable": function () {
                    c.hide();
                }
            };
        }
        return b.prototype.shouldInitialize = function () {
            return !B.isEmpty(this.options.popover.table);
        }, b.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: "note-table-popover"
            }).render().appendTo(this.options.container);
            var a = this.$popover.find(".popover-content,.note-popover-content");
            this.context.invoke("buttons.build", a, this.options.popover.table), L.isFF && document.execCommand("enableInlineTableEditing", !1, !1);
        }, b.prototype.destroy = function () {
            this.$popover.remove();
        }, b.prototype.update = function (a) {
            if (this.context.isDisabled()) return !1;
            var b = Cb.isCell(a);
            if (b) {
                var c = Cb.posFromPlaceholder(a);
                this.$popover.css({
                    display: "block",
                    left: c.left,
                    top: c.top
                });
            } else this.hide();
            return b;
        }, b.prototype.hide = function () {
            this.$popover.hide();
        }, b;
    }(), gc = function () {
        function b(b) {
            this.context = b, this.ui = a.summernote.ui, this.$body = a(document.body), this.$editor = b.layoutInfo.editor,
                this.options = b.options, this.lang = this.options.langInfo;
        }
        return b.prototype.initialize = function () {
            var a = this.options.dialogsInBody ? this.$body : this.$editor, b = ['<div class="form-group note-form-group row-fluid">', '<label class="note-form-label">' + this.lang.video.url + ' <small class="text-muted">' + this.lang.video.providers + "</small></label>", '<input class="note-video-url form-control note-form-control note-input" type="text" />', "</div>"].join(""), c = '<input type="button" href="#" class="btn btn-primary note-btn note-btn-primary note-video-btn" value="' + this.lang.video.insert + '" disabled>';
            this.$dialog = this.ui.dialog({
                title: this.lang.video.insert,
                fade: this.options.dialogsFade,
                body: b,
                footer: c
            }).render().appendTo(a);
        }, b.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog), this.$dialog.remove();
        }, b.prototype.bindEnterKey = function (a, b) {
            a.on("keypress", function (a) {
                a.keyCode === Ib.code.ENTER && (a.preventDefault(), b.trigger("click"));
            });
        }, b.prototype.createVideoNode = function (b) {
            var c, d = b.match(/\/\/(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?$/), e = b.match(/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/), f = b.match(/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/), g = b.match(/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/), h = b.match(/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/), i = b.match(/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/), j = b.match(/\/\/v\.qq\.com.*?vid=(.+)/), k = b.match(/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/), l = b.match(/^.+.(mp4|m4v)$/), m = b.match(/^.+.(ogg|ogv)$/), n = b.match(/^.+.(webm)$/);
            if (d && 11 === d[1].length) {
                var o = d[1], p = 0;
                if (void 0 !== d[2]) {
                    var q = d[2].match(/^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/);
                    if (q) for (var r = [3600, 60, 1], s = 0, t = r.length; s < t; s++) p += void 0 !== q[s + 1] ? r[s] * parseInt(q[s + 1], 10) : 0;
                }
                c = a("<iframe>").attr("frameborder", 0).attr("src", "//www.youtube.com/embed/" + o + (0 < p ? "?start=" + p : "")).attr("width", "640").attr("height", "360");
            } else if (e && e[0].length) c = a("<iframe>").attr("frameborder", 0).attr("src", "https://instagram.com/p/" + e[1] + "/embed/").attr("width", "612").attr("height", "710").attr("scrolling", "no").attr("allowtransparency", "true"); else if (f && f[0].length) c = a("<iframe>").attr("frameborder", 0).attr("src", f[0] + "/embed/simple").attr("width", "600").attr("height", "600").attr("class", "vine-embed"); else if (g && g[3].length) c = a("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("src", "//player.vimeo.com/video/" + g[3]).attr("width", "640").attr("height", "360"); else if (h && h[2].length) c = a("<iframe>").attr("frameborder", 0).attr("src", "//www.dailymotion.com/embed/video/" + h[2]).attr("width", "640").attr("height", "360"); else if (i && i[1].length) c = a("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "498").attr("width", "510").attr("src", "//player.youku.com/embed/" + i[1]); else if (j && j[1].length || k && k[2].length) {
                var u = j && j[1].length ? j[1] : k[2];
                c = a("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "310").attr("width", "500").attr("src", "http://v.qq.com/iframe/player.html?vid=" + u + "&amp;auto=0");
            } else {
                if (!(l || m || n)) return !1;
                c = a("<video controls>").attr("src", b).attr("width", "640").attr("height", "360");
            }
            return c.addClass("note-video-clip"), c[0];
        }, b.prototype.show = function () {
            var a = this, b = this.context.invoke("editor.getSelectedText");
            this.context.invoke("editor.saveRange"), this.showVideoDialog(b).then(function (b) {
                a.ui.hideDialog(a.$dialog), a.context.invoke("editor.restoreRange");
                var c = a.createVideoNode(b);
                c && a.context.invoke("editor.insertNode", c);
            }).fail(function () {
                a.context.invoke("editor.restoreRange");
            });
        }, b.prototype.showVideoDialog = function (b) {
            var c = this;
            return a.Deferred(function (a) {
                var d = c.$dialog.find(".note-video-url"), e = c.$dialog.find(".note-video-btn");
                c.ui.onDialogShown(c.$dialog, function () {
                    c.context.triggerEvent("dialog.shown"), d.val(b).on("input", function () {
                        c.ui.toggleBtn(e, d.val());
                    }), L.isSupportTouch || d.trigger("focus"), e.click(function (b) {
                        b.preventDefault(), a.resolve(d.val());
                    }), c.bindEnterKey(d, e);
                }), c.ui.onDialogHidden(c.$dialog, function () {
                    d.off("input"), e.off("click"), "pending" === a.state() && a.reject();
                }), c.ui.showDialog(c.$dialog);
            });
        }, b;
    }(), hc = function () {
        function b(b) {
            this.context = b, this.ui = a.summernote.ui, this.$body = a(document.body), this.$editor = b.layoutInfo.editor,
                this.options = b.options, this.lang = this.options.langInfo;
        }
        return b.prototype.initialize = function () {
            var a = this.options.dialogsInBody ? this.$body : this.$editor, b = ['<p class="text-center">', '<a href="http://summernote.org/" target="_blank">Summernote 0.8.11</a> · ', '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> · ', '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>', "</p>"].join("");
            this.$dialog = this.ui.dialog({
                title: this.lang.options.help,
                fade: this.options.dialogsFade,
                body: this.createShortcutList(),
                footer: b,
                callback: function (a) {
                    a.find(".modal-body,.note-modal-body").css({
                        "max-height": 300,
                        overflow: "scroll"
                    });
                }
            }).render().appendTo(a);
        }, b.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog), this.$dialog.remove();
        }, b.prototype.createShortcutList = function () {
            var b = this, c = this.options.keyMap[L.isMac ? "mac" : "pc"];
            return Object.keys(c).map(function (d) {
                var e = c[d], f = a('<div><div class="help-list-item"/></div>');
                return f.append(a("<label><kbd>" + d + "</kdb></label>").css({
                    width: 180,
                    "margin-right": 10
                })).append(a("<span/>").html(b.context.memo("help." + e) || e)), f.html();
            }).join("");
        }, b.prototype.showHelpDialog = function () {
            var b = this;
            return a.Deferred(function (a) {
                b.ui.onDialogShown(b.$dialog, function () {
                    b.context.triggerEvent("dialog.shown"), a.resolve();
                }), b.ui.showDialog(b.$dialog);
            }).promise();
        }, b.prototype.show = function () {
            var a = this;
            this.context.invoke("editor.saveRange"), this.showHelpDialog().then(function () {
                a.context.invoke("editor.restoreRange");
            });
        }, b;
    }(), ic = function () {
        function b(b) {
            var c = this;
            this.context = b, this.ui = a.summernote.ui, this.options = b.options, this.events = {
                "summernote.keyup summernote.mouseup summernote.scroll": function () {
                    c.update();
                },
                "summernote.disable summernote.change summernote.dialog.shown": function () {
                    c.hide();
                },
                "summernote.focusout": function (a, b) {
                    L.isFF || b.relatedTarget && Cb.ancestor(b.relatedTarget, v.eq(c.$popover[0])) || c.hide();
                }
            };
        }
        return b.prototype.shouldInitialize = function () {
            return this.options.airMode && !B.isEmpty(this.options.popover.air);
        }, b.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: "note-air-popover"
            }).render().appendTo(this.options.container);
            var a = this.$popover.find(".popover-content");
            this.context.invoke("buttons.build", a, this.options.popover.air);
        }, b.prototype.destroy = function () {
            this.$popover.remove();
        }, b.prototype.update = function () {
            var a = this.context.invoke("editor.currentStyle");
            if (a.range && !a.range.isCollapsed()) {
                var b = B.last(a.range.getClientRects());
                if (b) {
                    var c = v.rect2bnd(b);
                    this.$popover.css({
                        display: "block",
                        left: Math.max(c.left + c.width / 2, 0) - 20,
                        top: c.top + c.height
                    }), this.context.invoke("buttons.updateCurrentStyle", this.$popover);
                }
            } else this.hide();
        }, b.prototype.hide = function () {
            this.$popover.hide();
        }, b;
    }(), jc = function () {
        function b(b) {
            var c = this;
            this.context = b, this.ui = a.summernote.ui, this.$editable = b.layoutInfo.editable,
                this.options = b.options, this.hint = this.options.hint || [], this.direction = this.options.hintDirection || "bottom",
                this.hints = a.isArray(this.hint) ? this.hint : [this.hint], this.events = {
                    "summernote.keyup": function (a, b) {
                        b.isDefaultPrevented() || c.handleKeyup(b);
                    },
                    "summernote.keydown": function (a, b) {
                        c.handleKeydown(b);
                    },
                    "summernote.disable summernote.dialog.shown": function () {
                        c.hide();
                    }
                };
        }
        return b.prototype.shouldInitialize = function () {
            return 0 < this.hints.length;
        }, b.prototype.initialize = function () {
            var b = this;
            this.lastWordRange = null, this.$popover = this.ui.popover({
                className: "note-hint-popover",
                hideArrow: !0,
                direction: ""
            }).render().appendTo(this.options.container), this.$popover.hide(), this.$content = this.$popover.find(".popover-content,.note-popover-content"),
                this.$content.on("click", ".note-hint-item", function (c) {
                    b.$content.find(".active").removeClass("active"), a(c.currentTarget).addClass("active"),
                        b.replace();
                });
        }, b.prototype.destroy = function () {
            this.$popover.remove();
        }, b.prototype.selectItem = function (a) {
            this.$content.find(".active").removeClass("active"), a.addClass("active"), this.$content[0].scrollTop = a[0].offsetTop - this.$content.innerHeight() / 2;
        }, b.prototype.moveDown = function () {
            var a = this.$content.find(".note-hint-item.active"), b = a.next();
            if (b.length) this.selectItem(b); else {
                var c = a.parent().next();
                c.length || (c = this.$content.find(".note-hint-group").first()), this.selectItem(c.find(".note-hint-item").first());
            }
        }, b.prototype.moveUp = function () {
            var a = this.$content.find(".note-hint-item.active"), b = a.prev();
            if (b.length) this.selectItem(b); else {
                var c = a.parent().prev();
                c.length || (c = this.$content.find(".note-hint-group").last()), this.selectItem(c.find(".note-hint-item").last());
            }
        }, b.prototype.replace = function () {
            var a = this.$content.find(".note-hint-item.active");
            if (a.length) {
                var b = this.nodeFromItem(a);
                this.lastWordRange.insertNode(b), Gb.createFromNode(b).collapse().select(), this.lastWordRange = null,
                    this.hide(), this.context.triggerEvent("change", this.$editable.html(), this.$editable[0]),
                    this.context.invoke("editor.focus");
            }
        }, b.prototype.nodeFromItem = function (a) {
            var b = this.hints[a.data("index")], c = a.data("item"), d = b.content ? b.content(c) : c;
            return "string" == typeof d && (d = Cb.createText(d)), d;
        }, b.prototype.createItemTemplates = function (b, c) {
            var d = this.hints[b];
            return c.map(function (c, e) {
                var f = a('<div class="note-hint-item"/>');
                return f.append(d.template ? d.template(c) : c + ""), f.data({
                    index: b,
                    item: c
                }), f;
            });
        }, b.prototype.handleKeydown = function (a) {
            this.$popover.is(":visible") && (a.keyCode === Ib.code.ENTER ? (a.preventDefault(),
                this.replace()) : a.keyCode === Ib.code.UP ? (a.preventDefault(), this.moveUp()) : a.keyCode === Ib.code.DOWN && (a.preventDefault(),
                    this.moveDown()));
        }, b.prototype.searchKeyword = function (a, b, c) {
            var d = this.hints[a];
            if (d && d.match.test(b) && d.search) {
                var e = d.match.exec(b);
                d.search(e[1], c);
            } else c();
        }, b.prototype.createGroup = function (b, c) {
            var d = this, e = a('<div class="note-hint-group note-hint-group-' + b + '"/>');
            return this.searchKeyword(b, c, function (a) {
                (a = a || []).length && (e.html(d.createItemTemplates(b, a)), d.show());
            }), e;
        }, b.prototype.handleKeyup = function (a) {
            var b = this;
            if (!B.contains([Ib.code.ENTER, Ib.code.UP, Ib.code.DOWN], a.keyCode)) {
                var c = this.context.invoke("editor.createRange").getWordRange(), d = c.toString();
                if (this.hints.length && d) {
                    this.$content.empty();
                    var e = v.rect2bnd(B.last(c.getClientRects()));
                    e && (this.$popover.hide(), this.lastWordRange = c, this.hints.forEach(function (a, c) {
                        a.match.test(d) && b.createGroup(c, d).appendTo(b.$content);
                    }), this.$content.find(".note-hint-item:first").addClass("active"), "top" === this.direction ? this.$popover.css({
                        left: e.left,
                        top: e.top - this.$popover.outerHeight() - 5
                    }) : this.$popover.css({
                        left: e.left,
                        top: e.top + e.height + 5
                    }));
                } else this.hide();
            }
        }, b.prototype.show = function () {
            this.$popover.show();
        }, b.prototype.hide = function () {
            this.$popover.hide();
        }, b;
    }(), kc = function () {
        function b(b, c) {
            this.ui = a.summernote.ui, this.$note = b, this.memos = {}, this.modules = {}, this.layoutInfo = {},
                this.options = c, this.initialize();
        }
        return b.prototype.initialize = function () {
            return this.layoutInfo = this.ui.createLayout(this.$note, this.options), this._initialize(),
                this.$note.hide(), this;
        }, b.prototype.destroy = function () {
            this._destroy(), this.$note.removeData("summernote"), this.ui.removeLayout(this.$note, this.layoutInfo);
        }, b.prototype.reset = function () {
            var a = this.isDisabled();
            this.code(Cb.emptyPara), this._destroy(), this._initialize(), a && this.disable();
        }, b.prototype._initialize = function () {
            var b = this, c = a.extend({}, this.options.buttons);
            Object.keys(c).forEach(function (a) {
                b.memo("button." + a, c[a]);
            });
            var d = a.extend({}, this.options.modules, a.summernote.plugins || {});
            Object.keys(d).forEach(function (a) {
                b.module(a, d[a], !0);
            }), Object.keys(this.modules).forEach(function (a) {
                b.initializeModule(a);
            });
        }, b.prototype._destroy = function () {
            var a = this;
            Object.keys(this.modules).reverse().forEach(function (b) {
                a.removeModule(b);
            }), Object.keys(this.memos).forEach(function (b) {
                a.removeMemo(b);
            }), this.triggerEvent("destroy", this);
        }, b.prototype.code = function (a) {
            var b = this.invoke("codeview.isActivated");
            if (void 0 === a) return this.invoke("codeview.sync"), b ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();
            b ? this.layoutInfo.codable.val(a) : this.layoutInfo.editable.html(a), this.$note.val(a),
                this.triggerEvent("change", a);
        }, b.prototype.isDisabled = function () {
            return "false" === this.layoutInfo.editable.attr("contenteditable");
        }, b.prototype.enable = function () {
            this.layoutInfo.editable.attr("contenteditable", !0), this.invoke("toolbar.activate", !0),
                this.triggerEvent("disable", !1);
        }, b.prototype.disable = function () {
            this.invoke("codeview.isActivated") && this.invoke("codeview.deactivate"), this.layoutInfo.editable.attr("contenteditable", !1),
                this.invoke("toolbar.deactivate", !0), this.triggerEvent("disable", !0);
        }, b.prototype.triggerEvent = function () {
            var a = B.head(arguments), b = B.tail(B.from(arguments)), c = this.options.callbacks[v.namespaceToCamel(a, "on")];
            c && c.apply(this.$note[0], b), this.$note.trigger("summernote." + a, b);
        }, b.prototype.initializeModule = function (a) {
            var b = this.modules[a];
            b.shouldInitialize = b.shouldInitialize || v.ok, b.shouldInitialize() && (b.initialize && b.initialize(),
                b.events && Cb.attachEvents(this.$note, b.events));
        }, b.prototype.module = function (a, b, c) {
            if (1 === arguments.length) return this.modules[a];
            this.modules[a] = new b(this), c || this.initializeModule(a);
        }, b.prototype.removeModule = function (a) {
            var b = this.modules[a];
            b.shouldInitialize() && (b.events && Cb.detachEvents(this.$note, b.events), b.destroy && b.destroy()),
                delete this.modules[a];
        }, b.prototype.memo = function (a, b) {
            if (1 === arguments.length) return this.memos[a];
            this.memos[a] = b;
        }, b.prototype.removeMemo = function (a) {
            this.memos[a] && this.memos[a].destroy && this.memos[a].destroy(), delete this.memos[a];
        }, b.prototype.createInvokeHandlerAndUpdateState = function (a, b) {
            var c = this;
            return function (d) {
                c.createInvokeHandler(a, b)(d), c.invoke("buttons.updateCurrentStyle");
            };
        }, b.prototype.createInvokeHandler = function (b, c) {
            var d = this;
            return function (e) {
                e.preventDefault();
                var f = a(e.target);
                d.invoke(b, c || f.closest("[data-value]").data("value"), f);
            };
        }, b.prototype.invoke = function () {
            var a = B.head(arguments), b = B.tail(B.from(arguments)), c = a.split("."), d = 1 < c.length, e = d && B.head(c), f = d ? B.last(c) : B.head(c), g = this.modules[e || "editor"];
            return !e && this[f] ? this[f].apply(this, b) : g && g[f] && g.shouldInitialize() ? g[f].apply(g, b) : void 0;
        }, b;
    }();
    a.fn.extend({
        summernote: function () {
            var b = a.type(B.head(arguments)), c = "string" === b, d = "object" === b, e = a.extend({}, a.summernote.options, d ? B.head(arguments) : {});
            e.langInfo = a.extend(!0, {}, a.summernote.lang["en-US"], a.summernote.lang[e.lang]),
                e.icons = a.extend(!0, {}, a.summernote.options.icons, e.icons), e.tooltip = "auto" === e.tooltip ? !L.isSupportTouch : e.tooltip,
                this.each(function (b, c) {
                    var d = a(c);
                    if (!d.data("summernote")) {
                        var f = new kc(d, e);
                        d.data("summernote", f), d.data("summernote").triggerEvent("init", f.layoutInfo);
                    }
                });
            var f = this.first();
            if (f.length) {
                var g = f.data("summernote");
                if (c) return g.invoke.apply(g, B.from(arguments));
                e.focus && g.invoke("editor.focus");
            }
            return this;
        }
    }), a.summernote = a.extend(a.summernote, {
        version: "0.8.11",
        ui: t,
        dom: Cb,
        range: Gb,
        plugins: {},
        options: {
            modules: {
                editor: Qb,
                clipboard: Rb,
                dropzone: Sb,
                codeview: Tb,
                statusbar: Ub,
                fullscreen: Vb,
                handle: Wb,
                hintPopover: jc,
                autoLink: Yb,
                autoSync: Zb,
                placeholder: $b,
                buttons: _b,
                toolbar: ac,
                linkDialog: bc,
                linkPopover: cc,
                imageDialog: dc,
                imagePopover: ec,
                tablePopover: fc,
                videoDialog: gc,
                helpDialog: hc,
                airPopover: ic
            },
            buttons: {},
            lang: "en-US",
            followingToolbar: !0,
            otherStaticBar: "",
            toolbar: [["style", ["style"]], ["font", ["bold", "underline", "clear"]], ["fontname", ["fontname"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]],
            popatmouse: !0,
            popover: {
                image: [["imagesize", ["imageSize100", "imageSize50", "imageSize25"]], ["float", ["floatLeft", "floatRight", "floatNone"]], ["remove", ["removeMedia"]]],
                link: [["link", ["linkDialogShow", "unlink"]]],
                table: [["add", ["addRowDown", "addRowUp", "addColLeft", "addColRight"]], ["delete", ["deleteRow", "deleteCol", "deleteTable"]]],
                air: [["color", ["color"]], ["font", ["bold", "underline", "clear"]], ["para", ["ul", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture"]]]
            },
            airMode: !1,
            width: null,
            height: null,
            linkTargetBlank: !0,
            focus: !1,
            tabSize: 4,
            styleWithSpan: !0,
            shortcuts: !0,
            textareaAutoSync: !0,
            hintDirection: "bottom",
            tooltip: "auto",
            container: "body",
            maxTextLength: 0,
            styleTags: ["p", {
                title: "Blockquote",
                tag: "blockquote",
                className: "blockquote",
                value: "blockquote"
            }, "h1", "h2", "h3", "h4", "h5", "h6"],
            fontNames: ["Arial", "Arial Black", "Comic Sans MS", "Courier New", "Helvetica Neue", "Helvetica", "Impact", "Lucida Grande", "Tahoma", "Times New Roman", "Verdana"],
            fontSizes: ["4","5","6","7","8", "9", "10", "11", "12", "14", "18", "24", "36"],
            colors: [["#000000", "#424242", "#636363", "#9C9C94", "#CEC6CE", "#EFEFEF", "#F7F7F7", "#FFFFFF"], ["#FF0000", "#FF9C00", "#FFFF00", "#00FF00", "#00FFFF", "#0000FF", "#9C00FF", "#FF00FF"], ["#F7C6CE", "#FFE7CE", "#FFEFC6", "#D6EFD6", "#CEDEE7", "#CEE7F7", "#D6D6E7", "#E7D6DE"], ["#E79C9C", "#FFC69C", "#FFE79C", "#B5D6A5", "#A5C6CE", "#9CC6EF", "#B5A5D6", "#D6A5BD"], ["#E76363", "#F7AD6B", "#FFD663", "#94BD7B", "#73A5AD", "#6BADDE", "#8C7BC6", "#C67BA5"], ["#CE0000", "#E79439", "#EFC631", "#6BA54A", "#4A7B8C", "#3984C6", "#634AA5", "#A54A7B"], ["#9C0000", "#B56308", "#BD9400", "#397B21", "#104A5A", "#085294", "#311873", "#731842"], ["#630000", "#7B3900", "#846300", "#295218", "#083139", "#003163", "#21104A", "#4A1031"]],
            colorsName: [["Black", "Tundora", "Dove Gray", "Star Dust", "Pale Slate", "Gallery", "Alabaster", "White"], ["Red", "Orange Peel", "Yellow", "Green", "Cyan", "Blue", "Electric Violet", "Magenta"], ["Azalea", "Karry", "Egg White", "Zanah", "Botticelli", "Tropical Blue", "Mischka", "Twilight"], ["Tonys Pink", "Peach Orange", "Cream Brulee", "Sprout", "Casper", "Perano", "Cold Purple", "Careys Pink"], ["Mandy", "Rajah", "Dandelion", "Olivine", "Gulf Stream", "Viking", "Blue Marguerite", "Puce"], ["Guardsman Red", "Fire Bush", "Golden Dream", "Chelsea Cucumber", "Smalt Blue", "Boston Blue", "Butterfly Bush", "Cadillac"], ["Sangria", "Mai Tai", "Buddha Gold", "Forest Green", "Eden", "Venice Blue", "Meteorite", "Claret"], ["Rosewood", "Cinnamon", "Olive", "Parsley", "Tiber", "Midnight Blue", "Valentino", "Loulou"]],
            lineHeights: ["0.2","0.4","0.6","0.8","1.0", "1.2", "1.4", "1.5", "1.6", "1.8", "2.0", "3.0"],
            tableClassName: "table table-bordered",
            insertTableMaxSize: {
                col: 10,
                row: 10
            },
            dialogsInBody: !1,
            dialogsFade: !1,
            maximumImageFileSize: null,
            callbacks: {
                onInit: null,
                onFocus: null,
                onBlur: null,
                onBlurCodeview: null,
                onEnter: null,
                onKeyup: null,
                onKeydown: null,
                onImageUpload: null,
                onImageUploadError: null,
                onImageLinkInsert: null
            },
            codemirror: {
                mode: "text/html",
                htmlMode: !0,
                lineNumbers: !0
            },
            keyMap: {
                pc: {
                    ENTER: "insertParagraph",
                    "CTRL+Z": "undo",
                    "CTRL+Y": "redo",
                    TAB: "tab",
                    "SHIFT+TAB": "untab",
                    "CTRL+B": "bold",
                    "CTRL+I": "italic",
                    "CTRL+U": "underline",
                    "CTRL+SHIFT+S": "strikethrough",
                    "CTRL+BACKSLASH": "removeFormat",
                    "CTRL+SHIFT+L": "justifyLeft",
                    "CTRL+SHIFT+E": "justifyCenter",
                    "CTRL+SHIFT+R": "justifyRight",
                    "CTRL+SHIFT+J": "justifyFull",
                    "CTRL+SHIFT+NUM7": "insertUnorderedList",
                    "CTRL+SHIFT+NUM8": "insertOrderedList",
                    "CTRL+LEFTBRACKET": "outdent",
                    "CTRL+RIGHTBRACKET": "indent",
                    "CTRL+NUM0": "formatPara",
                    "CTRL+NUM1": "formatH1",
                    "CTRL+NUM2": "formatH2",
                    "CTRL+NUM3": "formatH3",
                    "CTRL+NUM4": "formatH4",
                    "CTRL+NUM5": "formatH5",
                    "CTRL+NUM6": "formatH6",
                    "CTRL+ENTER": "insertHorizontalRule",
                    "CTRL+K": "linkDialog.show"
                },
                mac: {
                    ENTER: "insertParagraph",
                    "CMD+Z": "undo",
                    "CMD+SHIFT+Z": "redo",
                    TAB: "tab",
                    "SHIFT+TAB": "untab",
                    "CMD+B": "bold",
                    "CMD+I": "italic",
                    "CMD+U": "underline",
                    "CMD+SHIFT+S": "strikethrough",
                    "CMD+BACKSLASH": "removeFormat",
                    "CMD+SHIFT+L": "justifyLeft",
                    "CMD+SHIFT+E": "justifyCenter",
                    "CMD+SHIFT+R": "justifyRight",
                    "CMD+SHIFT+J": "justifyFull",
                    "CMD+SHIFT+NUM7": "insertUnorderedList",
                    "CMD+SHIFT+NUM8": "insertOrderedList",
                    "CMD+LEFTBRACKET": "outdent",
                    "CMD+RIGHTBRACKET": "indent",
                    "CMD+NUM0": "formatPara",
                    "CMD+NUM1": "formatH1",
                    "CMD+NUM2": "formatH2",
                    "CMD+NUM3": "formatH3",
                    "CMD+NUM4": "formatH4",
                    "CMD+NUM5": "formatH5",
                    "CMD+NUM6": "formatH6",
                    "CMD+ENTER": "insertHorizontalRule",
                    "CMD+K": "linkDialog.show"
                }
            },
            icons: {
                align: "note-icon-align",
                alignCenter: "note-icon-align-center",
                alignJustify: "note-icon-align-justify",
                alignLeft: "note-icon-align-left",
                alignRight: "note-icon-align-right",
                rowBelow: "note-icon-row-below",
                colBefore: "note-icon-col-before",
                colAfter: "note-icon-col-after",
                rowAbove: "note-icon-row-above",
                rowRemove: "note-icon-row-remove",
                colRemove: "note-icon-col-remove",
                indent: "note-icon-align-indent",
                outdent: "note-icon-align-outdent",
                arrowsAlt: "note-icon-arrows-alt",
                bold: "note-icon-bold",
                caret: "note-icon-caret",
                circle: "note-icon-circle",
                close: "note-icon-close",
                code: "note-icon-code",
                eraser: "note-icon-eraser",
                font: "note-icon-font",
                frame: "note-icon-frame",
                italic: "note-icon-italic",
                link: "note-icon-link",
                unlink: "note-icon-chain-broken",
                magic: "note-icon-magic",
                menuCheck: "note-icon-menu-check",
                minus: "note-icon-minus",
                orderedlist: "note-icon-orderedlist",
                pencil: "note-icon-pencil",
                picture: "note-icon-picture",
                question: "note-icon-question",
                redo: "note-icon-redo",
                square: "note-icon-square",
                strikethrough: "note-icon-strikethrough",
                subscript: "note-icon-subscript",
                superscript: "note-icon-superscript",
                table: "note-icon-table",
                textHeight: "note-icon-text-height",
                trash: "note-icon-trash",
                underline: "note-icon-underline",
                undo: "note-icon-undo",
                unorderedlist: "note-icon-unorderedlist",
                video: "note-icon-video"
            }
        }
    });
});