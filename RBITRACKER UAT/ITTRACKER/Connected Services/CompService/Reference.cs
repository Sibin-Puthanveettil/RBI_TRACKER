//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RBIDATATRACK.CompService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CompService.ICompService")]
    public interface ICompService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/CompSelect", ReplyAction="http://tempuri.org/ICompService/CompSelectResponse")]
        System.Data.DataSet CompSelect(string flag, string PageVal, string parval1, string parval2, string parval3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/CompSelect", ReplyAction="http://tempuri.org/ICompService/CompSelectResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CompSelectAsync(string flag, string PageVal, string parval1, string parval2, string parval3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/CompConfirm", ReplyAction="http://tempuri.org/ICompService/CompConfirmResponse")]
        string CompConfirm(string flag, string PageVal, string parval1, string parval2, string parval3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/CompConfirm", ReplyAction="http://tempuri.org/ICompService/CompConfirmResponse")]
        System.Threading.Tasks.Task<string> CompConfirmAsync(string flag, string PageVal, string parval1, string parval2, string parval3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/RBIDocumentUpload", ReplyAction="http://tempuri.org/ICompService/RBIDocumentUploadResponse")]
        string RBIDocumentUpload(string flag, string Param, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/RBIDocumentUpload", ReplyAction="http://tempuri.org/ICompService/RBIDocumentUploadResponse")]
        System.Threading.Tasks.Task<string> RBIDocumentUploadAsync(string flag, string Param, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/DocumentNclobUpload", ReplyAction="http://tempuri.org/ICompService/DocumentNclobUploadResponse")]
        string DocumentNclobUpload(string flag, string Param, string upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompService/DocumentNclobUpload", ReplyAction="http://tempuri.org/ICompService/DocumentNclobUploadResponse")]
        System.Threading.Tasks.Task<string> DocumentNclobUploadAsync(string flag, string Param, string upload_file);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompServiceChannel : RBIDATATRACK.CompService.ICompService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompServiceClient : System.ServiceModel.ClientBase<RBIDATATRACK.CompService.ICompService>, RBIDATATRACK.CompService.ICompService {
        
        public CompServiceClient() {
        }
        
        public CompServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet CompSelect(string flag, string PageVal, string parval1, string parval2, string parval3) {
            return base.Channel.CompSelect(flag, PageVal, parval1, parval2, parval3);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CompSelectAsync(string flag, string PageVal, string parval1, string parval2, string parval3) {
            return base.Channel.CompSelectAsync(flag, PageVal, parval1, parval2, parval3);
        }
        
        public string CompConfirm(string flag, string PageVal, string parval1, string parval2, string parval3) {
            return base.Channel.CompConfirm(flag, PageVal, parval1, parval2, parval3);
        }
        
        public System.Threading.Tasks.Task<string> CompConfirmAsync(string flag, string PageVal, string parval1, string parval2, string parval3) {
            return base.Channel.CompConfirmAsync(flag, PageVal, parval1, parval2, parval3);
        }
        
        public string RBIDocumentUpload(string flag, string Param, byte[] upload_file) {
            return base.Channel.RBIDocumentUpload(flag, Param, upload_file);
        }
        
        public System.Threading.Tasks.Task<string> RBIDocumentUploadAsync(string flag, string Param, byte[] upload_file) {
            return base.Channel.RBIDocumentUploadAsync(flag, Param, upload_file);
        }
        
        public string DocumentNclobUpload(string flag, string Param, string upload_file) {
            return base.Channel.DocumentNclobUpload(flag, Param, upload_file);
        }
        
        public System.Threading.Tasks.Task<string> DocumentNclobUploadAsync(string flag, string Param, string upload_file) {
            return base.Channel.DocumentNclobUploadAsync(flag, Param, upload_file);
        }
    }
}
