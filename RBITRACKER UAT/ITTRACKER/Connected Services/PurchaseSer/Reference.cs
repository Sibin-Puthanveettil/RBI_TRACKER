//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RBIDATATRACK.PurchaseSer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PurchaseSer.IPurchase")]
    public interface IPurchase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/DoWork", ReplyAction="http://tempuri.org/IPurchase/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/DoWork", ReplyAction="http://tempuri.org/IPurchase/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/TestService", ReplyAction="http://tempuri.org/IPurchase/TestServiceResponse")]
        string TestService(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/TestService", ReplyAction="http://tempuri.org/IPurchase/TestServiceResponse")]
        System.Threading.Tasks.Task<string> TestServiceAsync(string flag, string empcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseFillData", ReplyAction="http://tempuri.org/IPurchase/PurchaseFillDataResponse")]
        System.Data.DataSet PurchaseFillData(string flag, string PageVal, string PagePara, string PagePar1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseFillData", ReplyAction="http://tempuri.org/IPurchase/PurchaseFillDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> PurchaseFillDataAsync(string flag, string PageVal, string PagePara, string PagePar1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseConfirmations", ReplyAction="http://tempuri.org/IPurchase/PurchaseConfirmationsResponse")]
        string PurchaseConfirmations(string flag, string PagePara, string PagePara1, string PagePar2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseConfirmations", ReplyAction="http://tempuri.org/IPurchase/PurchaseConfirmationsResponse")]
        System.Threading.Tasks.Task<string> PurchaseConfirmationsAsync(string flag, string PagePara, string PagePara1, string PagePar2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseDocumentUpload", ReplyAction="http://tempuri.org/IPurchase/PurchaseDocumentUploadResponse")]
        string PurchaseDocumentUpload(string flag, string Param, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/PurchaseDocumentUpload", ReplyAction="http://tempuri.org/IPurchase/PurchaseDocumentUploadResponse")]
        System.Threading.Tasks.Task<string> PurchaseDocumentUploadAsync(string flag, string Param, byte[] upload_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/SecurityDevice", ReplyAction="http://tempuri.org/IPurchase/SecurityDeviceResponse")]
        string SecurityDevice(string flag, string Param, string PageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/SecurityDevice", ReplyAction="http://tempuri.org/IPurchase/SecurityDeviceResponse")]
        System.Threading.Tasks.Task<string> SecurityDeviceAsync(string flag, string Param, string PageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/SecurityDeviceSelect", ReplyAction="http://tempuri.org/IPurchase/SecurityDeviceSelectResponse")]
        System.Data.DataSet SecurityDeviceSelect(string flag, string Param, string PageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/SecurityDeviceSelect", ReplyAction="http://tempuri.org/IPurchase/SecurityDeviceSelectResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SecurityDeviceSelectAsync(string flag, string Param, string PageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/AccountConfirm", ReplyAction="http://tempuri.org/IPurchase/AccountConfirmResponse")]
        string AccountConfirm(string flag, string PageVal, string PagePara, string PagePar1, string LargeString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPurchase/AccountConfirm", ReplyAction="http://tempuri.org/IPurchase/AccountConfirmResponse")]
        System.Threading.Tasks.Task<string> AccountConfirmAsync(string flag, string PageVal, string PagePara, string PagePar1, string LargeString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPurchaseChannel : RBIDATATRACK.PurchaseSer.IPurchase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PurchaseClient : System.ServiceModel.ClientBase<RBIDATATRACK.PurchaseSer.IPurchase>, RBIDATATRACK.PurchaseSer.IPurchase {
        
        public PurchaseClient() {
        }
        
        public PurchaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PurchaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PurchaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PurchaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string TestService(string flag, string empcode) {
            return base.Channel.TestService(flag, empcode);
        }
        
        public System.Threading.Tasks.Task<string> TestServiceAsync(string flag, string empcode) {
            return base.Channel.TestServiceAsync(flag, empcode);
        }
        
        public System.Data.DataSet PurchaseFillData(string flag, string PageVal, string PagePara, string PagePar1) {
            return base.Channel.PurchaseFillData(flag, PageVal, PagePara, PagePar1);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PurchaseFillDataAsync(string flag, string PageVal, string PagePara, string PagePar1) {
            return base.Channel.PurchaseFillDataAsync(flag, PageVal, PagePara, PagePar1);
        }
        
        public string PurchaseConfirmations(string flag, string PagePara, string PagePara1, string PagePar2) {
            return base.Channel.PurchaseConfirmations(flag, PagePara, PagePara1, PagePar2);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseConfirmationsAsync(string flag, string PagePara, string PagePara1, string PagePar2) {
            return base.Channel.PurchaseConfirmationsAsync(flag, PagePara, PagePara1, PagePar2);
        }
        
        public string PurchaseDocumentUpload(string flag, string Param, byte[] upload_file) {
            return base.Channel.PurchaseDocumentUpload(flag, Param, upload_file);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseDocumentUploadAsync(string flag, string Param, byte[] upload_file) {
            return base.Channel.PurchaseDocumentUploadAsync(flag, Param, upload_file);
        }
        
        public string SecurityDevice(string flag, string Param, string PageValue) {
            return base.Channel.SecurityDevice(flag, Param, PageValue);
        }
        
        public System.Threading.Tasks.Task<string> SecurityDeviceAsync(string flag, string Param, string PageValue) {
            return base.Channel.SecurityDeviceAsync(flag, Param, PageValue);
        }
        
        public System.Data.DataSet SecurityDeviceSelect(string flag, string Param, string PageValue) {
            return base.Channel.SecurityDeviceSelect(flag, Param, PageValue);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SecurityDeviceSelectAsync(string flag, string Param, string PageValue) {
            return base.Channel.SecurityDeviceSelectAsync(flag, Param, PageValue);
        }
        
        public string AccountConfirm(string flag, string PageVal, string PagePara, string PagePar1, string LargeString) {
            return base.Channel.AccountConfirm(flag, PageVal, PagePara, PagePar1, LargeString);
        }
        
        public System.Threading.Tasks.Task<string> AccountConfirmAsync(string flag, string PageVal, string PagePara, string PagePar1, string LargeString) {
            return base.Channel.AccountConfirmAsync(flag, PageVal, PagePara, PagePar1, LargeString);
        }
    }
}
